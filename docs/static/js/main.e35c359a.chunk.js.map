{"version":3,"sources":["pages/TransferLearning.tsx","pages/Home.tsx","pages/Webcam.tsx","pages/ImageDetection.tsx","routes/index.ts","pages/SentimentAnalysis.tsx","components/Link/Link.tsx","components/Nav/Nav.tsx","App.tsx","reportWebVitals.ts","theme/index.ts","index.tsx"],"names":["raf","Home","p","Webcam","modelMobilenet","videoRef","useRef","useState","loading","setLoading","result","setResult","classify","useCallback","img","a","undefined","output","outputList","map","o","index","className","Math","round","probability","dispose","console","log","load","onCapture","current","data","webcam","capture","useEffect","loadCam","video","width","height","ref","onClick","variant","mt","ImageDetection","modelKnn","key","setKey","sx","onLoad","alt","crossOrigin","src","POSES","sort","b","localeCompare","TransferLearning","setWebcam","takingPictures","setTakingPictures","takenPoses","setTakenPoses","allPoses","setAllPoses","stopLoopDetection","window","cancelAnimationFrame","addExample","classId","i","activation","infer","nextFrame","poses","toString","loopDetection","getNumClasses","predictClass","mb","fontWeight","label","Object","keys","confidences","requestAnimationFrame","mx","textAlign","maxWidth","opacity","pointerEvents","justifyContent","Routes","path","component","name","exact","model","setModel","modelToxicity","setModelToxicity","metadata","setMetadata","loadingScore","setLoadingScore","score","setScore","scoreToxicity","setScoreToxicity","state","setState","loadModel","loadToxicity","loadLayersModel","fetch","json","onAnalyse","e","preventDefault","trimmed","trim","toLowerCase","replace","split","sequence","word","wordIndex","word_index","index_from","finalSequence","Array","max_len","length","fill","concat","inputTensor","tensor2d","prediction","predict","dataSync","as","onSubmit","autoComplete","onChange","evt","currentTarget","value","color","s","pl","results","every","match","r","JSON","stringify","probabilities","CustomLink","ThemeUILink","Link","children","props","RouterLink","Nav","location","useLocation","px","py","bg","pathname","to","App","setModelMobilenet","setModelKnn","error","setError","loadModels","mobilenet","knn","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","space","fonts","body","heading","monospace","fontSizes","fontWeights","bold","lineHeights","buttons","primary","cursor","secondary","colors","text","background","muted","links","nav","mr","navActive","styles","root","fontFamily","lineHeight","h1","fontSize","h2","h3","h4","h5","h6","pre","overflowX","code","table","borderCollapse","borderSpacing","th","borderBottomStyle","td","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e35c359a.chunk.js","sourcesContent":["import { data, nextFrame } from '@tensorflow/tfjs'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Box, Text, Button, Flex } from 'theme-ui'\nimport { TFPage } from '../types'\n\nconst CAMERA_SCALE = 1.2\nconst POSES = ['left', 'up', 'down', 'center', 'right'].sort((a, b) => a.localeCompare(b))\nlet raf: number | undefined\n\nconst TransferLearning = ({ modelMobilenet, modelKnn }: TFPage) => {\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const [webcam, setWebcam] = useState<any>()\n  const [result, setResult] = useState<JSX.Element>()\n  const [takingPictures, setTakingPictures] = useState<boolean>(false)\n  const [takenPoses, setTakenPoses] = useState<any[]>([])\n  const [allPoses, setAllPoses] = useState<boolean>(false)\n\n  useEffect(() => {\n    const loadCam = async (video: HTMLVideoElement) => {\n      setWebcam(await data.webcam(video))\n    }\n    if (videoRef.current) loadCam(videoRef.current)\n\n    return () => {\n      stopLoopDetection()\n    }\n  }, [videoRef])\n\n  const stopLoopDetection = () => {\n    if (raf) window.cancelAnimationFrame(raf)\n    raf = undefined\n  }\n\n  const addExample = async (classId: number | string) => {\n    setTakingPictures(true)\n    let i = 0\n\n    while (i < 15) {\n      const img = await webcam.capture()\n      const activation = modelMobilenet?.infer(img)\n\n      if (activation) modelKnn?.addExample(activation, classId)\n\n      img.dispose()\n      i++\n      await nextFrame()\n    }\n\n    const poses = [...takenPoses, classId].sort((a, b) => a.localeCompare(b))\n    setTakenPoses(poses)\n    setTakingPictures(false)\n\n    if (poses.toString() === POSES.toString()) {\n      setAllPoses(true)\n    }\n  }\n\n  const loopDetection = async () => {\n    if (!modelKnn) return\n    if (modelKnn.getNumClasses() > 0) {\n      const img = await webcam.capture()\n      const activation = modelMobilenet?.infer(img)\n      const result = await modelKnn?.predictClass(activation!)\n\n      setResult(\n        <Box>\n          <Box mb={2} sx={{ fontWeight: 'bold' }}>\n            {result.label}\n          </Box>\n          {Object.keys(result.confidences).map((a, index) => (\n            <Box key={index}>\n              {a}: {result.confidences[a]}\n            </Box>\n          ))}\n        </Box>\n      )\n\n      img.dispose()\n    }\n\n    raf = window.requestAnimationFrame(loopDetection)\n  }\n\n  const startLoopDetection = () => {\n    loopDetection()\n  }\n\n  return (\n    <Box p={4}>\n      <Box sx={{ mx: 'auto', textAlign: 'center', maxWidth: 640 * CAMERA_SCALE }}>\n        <Box>\n          <video width={640 * CAMERA_SCALE} height={480 * CAMERA_SCALE} ref={videoRef}></video>\n        </Box>\n        <Box\n          mt={3}\n          sx={{\n            opacity: takingPictures ? 0.5 : 1,\n            pointerEvents: takingPictures ? 'none' : 'visible',\n          }}\n        >\n          {!allPoses && (\n            <Box>\n              <Text>Teach the machine all angles of your face</Text>\n              <Flex sx={{ mt: 3, justifyContent: 'space-between' }}>\n                <Button onClick={() => addExample('left')} variant=\"secondary\">\n                  Left\n                </Button>\n                <Button onClick={() => addExample('up')} variant=\"secondary\">\n                  Up\n                </Button>\n                <Button onClick={() => addExample('center')} variant=\"secondary\">\n                  Center\n                </Button>\n                <Button onClick={() => addExample('down')} variant=\"secondary\">\n                  Down\n                </Button>\n                <Button onClick={() => addExample('right')} variant=\"secondary\">\n                  Right\n                </Button>\n              </Flex>\n            </Box>\n          )}\n          {allPoses && (\n            <Button onClick={startLoopDetection} mt={5}>\n              Detect head position\n            </Button>\n          )}\n        </Box>\n        <Box mt={3}>{result}</Box>\n      </Box>\n    </Box>\n  )\n}\n\nexport default TransferLearning\n","import { Box } from 'theme-ui'\n\nconst Home = () => {\n  return <Box p={4}>Choose one from the menu above</Box>\n}\n\nexport default Home\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { data, Tensor3D } from '@tensorflow/tfjs'\nimport { Box, Button } from 'theme-ui'\nimport { TFPage } from '../types'\n\nconst CAMERA_SCALE = 1.2\n\nconst Webcam = ({ modelMobilenet }: TFPage) => {\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const [loading, setLoading] = useState<boolean>(false)\n  const [result, setResult] = useState<JSX.Element[]>()\n\n  const classify = useCallback(\n    (img: Tensor3D) => {\n      const load = async (img: Tensor3D) => {\n        if (!modelMobilenet) {\n          setResult(undefined)\n          return\n        }\n\n        try {\n          setLoading(true)\n          const output = await modelMobilenet.classify(img)\n          const outputList = output.map((o, index) => (\n            <Box key={index}>\n              <b>{o.className}</b> - {`${Math.round(o.probability * 100)}%`}\n            </Box>\n          ))\n\n          setResult(outputList)\n          setLoading(false)\n\n          img.dispose()\n        } catch (e) {\n          setLoading(false)\n          setResult(undefined)\n          console.log(e)\n        }\n      }\n      load(img)\n    },\n    [modelMobilenet]\n  )\n\n  const onCapture = async () => {\n    if (!videoRef.current) return\n    try {\n      const webcam = await data.webcam(videoRef.current)\n      const img = await webcam.capture()\n      classify(img)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    const loadCam = async (video: HTMLVideoElement) => {\n      await data.webcam(video)\n    }\n    if (videoRef.current) loadCam(videoRef.current)\n  }, [videoRef])\n\n  return (\n    <Box p={4}>\n      <Box>\n        <video width={640 * CAMERA_SCALE} height={480 * CAMERA_SCALE} ref={videoRef}></video>\n      </Box>\n      <Button onClick={onCapture} variant=\"primary\">\n        Capture\n      </Button>\n      {loading && <Box>loading</Box>}\n      {result && <Box mt={3}>{result}</Box>}\n    </Box>\n  )\n}\n\nexport default Webcam\n","import '@tensorflow/tfjs'\nimport { Box, Image, Button } from 'theme-ui'\nimport { useCallback, useRef, useState } from 'react'\nimport { TFPage } from '../types'\n\nconst ImageDetection = ({ modelMobilenet, modelKnn }: TFPage) => {\n  const ref = useRef<HTMLImageElement>(null)\n  const [loading, setLoading] = useState<boolean>(false)\n\n  const [key, setKey] = useState<number>(0)\n  const [result, setResult] = useState<JSX.Element[]>()\n\n  const classify = useCallback(\n    (img: HTMLImageElement) => {\n      const load = async (img: HTMLImageElement) => {\n        if (!modelMobilenet) {\n          setLoading(false)\n          setResult(undefined)\n          return\n        }\n\n        try {\n          setLoading(true)\n          const output = await modelMobilenet.classify(img)\n          const outputList = output.map((o, index) => (\n            <Box key={index}>\n              <b>{o.className}</b> - {`${Math.round(o.probability * 100)}%`}\n            </Box>\n          ))\n\n          setResult(outputList)\n          setLoading(false)\n        } catch (e) {\n          setLoading(false)\n          setResult(undefined)\n          console.log(e)\n        }\n      }\n      load(img)\n    },\n    [modelMobilenet]\n  )\n\n  const onLoadImage = () => {\n    if (ref.current) classify(ref.current)\n  }\n\n  return (\n    <Box p={4}>\n      {modelMobilenet && (\n        <Box sx={{ width: 1000 }}>\n          <Box sx={{ height: 700 }}>\n            <Image\n              onLoad={onLoadImage}\n              key={key}\n              ref={ref}\n              alt=\"cat\"\n              crossOrigin=\"anonymous\"\n              src=\"https://picsum.photos/1000/700\"\n            />\n          </Box>\n          <Box mt={3}>{loading ? 'loading' : result ? result : ''}</Box>\n          {!loading && (\n            <Button\n              mt={3}\n              variant=\"primary\"\n              onClick={() => {\n                setLoading(true)\n                setResult(undefined)\n                setKey(key + 1)\n              }}\n            >\n              reload\n            </Button>\n          )}\n        </Box>\n      )}\n    </Box>\n  )\n}\n\nexport default ImageDetection\n","import { Home, ImageDetection, TransferLearning, Webcam } from '../pages'\nimport SentimentAnalysis from '../pages/SentimentAnalysis'\n\nconst Routes = [\n  {\n    path: '/',\n    component: Home,\n    name: 'Home',\n    exact: true,\n  },\n  {\n    path: '/tensorflow-study/image-detection',\n    component: ImageDetection,\n    name: 'Random Image Detection',\n  },\n  {\n    path: '/tensorflow-study/webcam',\n    component: Webcam,\n    name: 'Webcam',\n  },\n  {\n    path: '/tensorflow-study/transfer-learning',\n    component: TransferLearning,\n    name: 'Transfer Learning',\n  },\n  {\n    path: '/tensorflow-study/sentiment',\n    component: SentimentAnalysis,\n    name: 'Sentiment Analysis',\n  },\n]\n\nexport default Routes\n","import { LayersModel, loadLayersModel, tensor2d } from '@tensorflow/tfjs'\nimport React, { ChangeEvent, FormEvent, useEffect, useState } from 'react'\nimport { Box, Button, Heading, Input, Text } from 'theme-ui'\nimport { ToxicityClassifier, load as loadToxicity } from '@tensorflow-models/toxicity'\n\nconst MODEL_URL = 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json'\nconst METADATA_URL =\n  'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json'\n\nconst SentimentAnalysis = () => {\n  const [model, setModel] = useState<LayersModel>()\n  const [modelToxicity, setModelToxicity] = useState<ToxicityClassifier>()\n  const [metadata, setMetadata] = useState<any>()\n  const [loading, setLoading] = useState<boolean>(false)\n  const [loadingScore, setLoadingScore] = useState<boolean>(false)\n  const [score, setScore] = useState<number>()\n  const [scoreToxicity, setScoreToxicity] = useState<any[]>()\n  const [state, setState] = useState<string>(\n    'This is really the most useless talk I have ever watched'\n  )\n\n  const loadModel = async () => {\n    setLoading(true)\n    setModelToxicity(await loadToxicity(0.9, []))\n    setModel(await loadLayersModel(MODEL_URL))\n    setMetadata(await (await fetch(METADATA_URL)).json())\n    setLoading(false)\n  }\n\n  const onChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    setState(evt.currentTarget.value)\n  }\n\n  const onAnalyse = async (e: FormEvent | MouseEvent) => {\n    e.preventDefault()\n    if (!metadata || !model) return\n\n    setLoadingScore(true)\n    setScore(undefined)\n    setScoreToxicity(undefined)\n\n    const trimmed = state\n      .trim()\n      .toLowerCase()\n      .replace(/(\\.|,|!\\?)/g, '')\n      .split(' ')\n\n    const sequence = trimmed.map(word => {\n      const wordIndex = metadata.word_index[word]\n      if (typeof wordIndex === 'undefined') {\n        return 2\n      }\n      return wordIndex + metadata.index_from\n    })\n\n    const finalSequence = new Array(metadata.max_len - sequence.length).fill(0).concat(sequence)\n\n    const inputTensor = tensor2d(finalSequence, [1, metadata.max_len])\n    const prediction = model.predict(inputTensor)\n    //@ts-ignore\n    setScore(prediction.dataSync()[0])\n    //@ts-ignore\n    prediction.dispose()\n\n    setScoreToxicity(await modelToxicity?.classify([state]))\n    setLoadingScore(false)\n  }\n\n  useEffect(() => {\n    loadModel()\n  }, [])\n\n  return (\n    <Box p={4}>\n      {loading && <Text>Loading Sentiment and Toxicity models</Text>}\n      {!loading && (\n        <>\n          <Heading as=\"h2\">Sentiment analysis</Heading>\n          <form onSubmit={onAnalyse}>\n            <Input autoComplete=\"off\" mt={3} onChange={onChange} value={state} name=\"input\" />\n          </form>\n          {score && scoreToxicity && (\n            <Box mt={2}>\n              <Text>\n                <Heading mt={4} as=\"h3\">\n                  Sentiment Score:\n                </Heading>\n                <Text\n                  as=\"span\"\n                  mt={3}\n                  sx={{\n                    color: score > 0.66 ? 'green' : score < 0.33 ? 'red' : 'orange',\n                  }}\n                >\n                  {score}\n                </Text>\n              </Text>\n              <Text mt={2}>\n                <Heading mt={4} as=\"h3\">\n                  Toxicity:\n                </Heading>\n                {scoreToxicity?.map((s: any, index: number) => (\n                  <Box\n                    mt={2}\n                    pl={3}\n                    key={index}\n                    sx={{ opacity: s.results.every((a: any) => a.match) ? 1 : 0.4 }}\n                  >\n                    <b>{s.label}</b>:\n                    {s.results.map((r: any, i: number) => (\n                      <Box mt={2} key={i}>\n                        <Text sx={{ pl: 4 }}>Probabilities: {JSON.stringify(r.probabilities)}</Text>\n                        <Text sx={{ pl: 4 }}>\n                          Match:{' '}\n                          <Text\n                            as=\"span\"\n                            sx={{\n                              color: r.match ? 'green' : 'text',\n                              fontWeight: r.match ? 'bold' : 'normal',\n                            }}\n                          >\n                            {JSON.stringify(r.match)}\n                          </Text>\n                        </Text>\n                      </Box>\n                    ))}\n                  </Box>\n                ))}\n              </Text>\n            </Box>\n          )}\n          <Button\n            sx={{\n              opacity: loadingScore ? 0.4 : 1,\n              pointerEvents: loadingScore ? 'none' : 'visible',\n            }}\n            mt={4}\n            onClick={onAnalyse}\n          >\n            {!loadingScore ? 'Analyse' : 'Loading...'}\n          </Button>\n        </>\n      )}\n    </Box>\n  )\n}\n\nexport default SentimentAnalysis\n","import React, { RefAttributes, PropsWithoutRef, ForwardRefExoticComponent } from 'react'\nimport { Link as RouterLink, LinkProps as RouterLinkProps } from 'react-router-dom'\nimport { NavLink as ThemeUILink, NavLinkProps as ThemedUILinkProps } from 'theme-ui'\n\n/**\n * @see https://www.reactjunkie.com/theme-ui-react-router-link-typescript\n */\n\ntype ForwardRef<T, P> = ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>\n\nexport type CustomLinkCombinedProps = ThemedUILinkProps & RouterLinkProps<{}>\nexport const CustomLink: ForwardRef<HTMLAnchorElement, CustomLinkCombinedProps> = ThemeUILink\n\nconst Link = ({ children, ...props }: CustomLinkCombinedProps) => {\n  return (\n    <CustomLink as={RouterLink} {...props}>\n      {children}\n    </CustomLink>\n  )\n}\n\nexport default Link\n","import { useLocation } from 'react-router-dom'\nimport { Flex } from 'theme-ui'\nimport { Link } from '..'\nimport Routes from '../../routes'\n\nconst Nav = () => {\n  const location = useLocation()\n\n  return (\n    <Flex as=\"nav\" sx={{ px: 3, py: 4, bg: 'muted' }}>\n      {Routes.map(r => (\n        <Link key={r.name} variant={location.pathname === r.path ? 'navActive' : 'nav'} to={r.path}>\n          {r.name}\n        </Link>\n      ))}\n    </Flex>\n  )\n}\n\nexport default Nav\n","import React, { useEffect, useState } from 'react'\nimport * as mobilenet from '@tensorflow-models/mobilenet'\nimport * as knn from '@tensorflow-models/knn-classifier'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Box } from 'theme-ui'\nimport Routes from './routes'\nimport { Nav } from './components'\n\nconst App = () => {\n  const [modelMobilenet, setModelMobilenet] = useState<mobilenet.MobileNet>()\n  const [modelKnn, setModelKnn] = useState<knn.KNNClassifier>()\n  const [error, setError] = useState<boolean>(false)\n  const loadModels = async () => {\n    try {\n      setModelMobilenet(await mobilenet.load())\n      setModelKnn(await knn.create())\n    } catch (e) {\n      console.log(e)\n      setError(true)\n    }\n  }\n\n  useEffect(() => {\n    loadModels()\n  }, [])\n\n  return (\n    <Router>\n      <Nav />\n      {error ? (\n        <Box p={3}>Error loading Model</Box>\n      ) : (\n        <>\n          {modelMobilenet && modelKnn ? (\n            <Switch>\n              {Routes.map(({ exact, path, component: Component }, index) => (\n                <Route exact={exact} key={index} path={path}>\n                  <Component modelMobilenet={modelMobilenet} modelKnn={modelKnn} />\n                </Route>\n              ))}\n            </Switch>\n          ) : (\n            <Box p={3}>Loading Models</Box>\n          )}\n        </>\n      )}\n    </Router>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Theme } from 'theme-ui'\n\nconst theme: Theme = {\n  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n  fonts: {\n    body:\n      'system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", sans-serif',\n    heading: 'inherit',\n    monospace: 'Menlo, monospace',\n  },\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 96],\n  fontWeights: {\n    body: 400,\n    heading: 700,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.125,\n  },\n  buttons: {\n    primary: {\n      cursor: 'pointer',\n    },\n    secondary: {\n      bg: 'secondary',\n      color: 'white',\n      cursor: 'pointer',\n    },\n  },\n  colors: {\n    text: '#000',\n    background: '#fff',\n    primary: '#07c',\n    secondary: '#30c',\n    muted: '#f6f6f6',\n  },\n  links: {\n    nav: {\n      mr: 4,\n    },\n    navActive: {\n      variant: 'links.nav',\n      color: 'secondary',\n      pointerEvents: 'none',\n    },\n  },\n  styles: {\n    root: {\n      fontFamily: 'body',\n      lineHeight: 'body',\n      fontWeight: 'body',\n    },\n    h1: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 5,\n    },\n    h2: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 4,\n    },\n    h3: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 3,\n    },\n    h4: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 2,\n    },\n    h5: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 1,\n    },\n    h6: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 0,\n    },\n    p: {\n      color: 'text',\n      fontFamily: 'body',\n      fontWeight: 'body',\n      lineHeight: 'body',\n    },\n    a: {\n      color: 'primary',\n    },\n    pre: {\n      fontFamily: 'monospace',\n      overflowX: 'auto',\n      code: {\n        color: 'inherit',\n      },\n    },\n    code: {\n      fontFamily: 'monospace',\n      fontSize: 'inherit',\n    },\n    table: {\n      width: '100%',\n      borderCollapse: 'separate',\n      borderSpacing: 0,\n    },\n    th: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid',\n    },\n    td: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid',\n    },\n    img: {\n      maxWidth: '100%',\n    },\n  },\n}\n\nexport default theme\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from 'theme-ui'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport theme from './theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}