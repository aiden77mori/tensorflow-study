{"version":3,"sources":["pages/TransferLearning.tsx","pages/FaceMesh.tsx","pages/HandPose.tsx","pages/RealTimeObjDetection.tsx","pages/Home.tsx","components/Link/Link.tsx","components/Nav/Nav.tsx","components/Loading/Loading.tsx","components/Error/Error.tsx","pages/Webcam.tsx","pages/ImageDetection.tsx","hooks/useAnalyser.ts","hooks/useUserMedia.ts","common/index.ts","pages/SentimentAnalysis.tsx","pages/Audio.tsx","routes/index.ts","App.tsx","reportWebVitals.ts","theme/index.ts","index.tsx"],"names":["raf","model","camera","renderer","points","stats","Home","as","variant","href","target","sx","color","mt","CustomLink","ThemeUILink","Link","children","props","RouterLink","Nav","location","useLocation","flexDirection","px","py","background","minHeight","minWidth","width","Routes","map","r","pathname","path","pointerEvents","to","name","Loading","text","alignItems","Error","Webcam","videoRef","useRef","useState","modelMobilenet","setModelMobilenet","loading","setLoading","error","setError","result","setResult","classify","useCallback","img","a","undefined","output","outputList","o","index","className","Math","round","probability","dispose","console","log","load","onCapture","current","data","webcam","capture","loadModels","mobilenet","loadCam","video","useEffect","mb","style","transform","height","ref","onClick","ImageDetection","key","setKey","onLoad","alt","crossOrigin","src","maxHeight","opacity","POSES","sort","b","localeCompare","TransferLearning","modelKnn","setModelKnn","setWebcam","takingPictures","setTakingPictures","takenPoses","setTakenPoses","allPoses","setAllPoses","addExample","classId","i","activation","infer","nextFrame","poses","toString","loopDetection","getNumClasses","predictClass","fontWeight","label","Object","keys","confidences","window","requestAnimationFrame","knn","cancelAnimationFrame","maxWidth","justifyContent","useAnalyser","stream","fftSize","analyser","setAnalyser","audioctx","AudioContext","source","createMediaStreamSource","createAnalyser","smoothingTimeConstant","connect","removeUserMedia","media","getTracks","forEach","m","stop","removeTrack","useUserMedia","setMedia","navigator","mediaDevices","getUserMedia","addEventListener","getMedia","PALLETE","scene","Scene","geometry","BufferGeometry","positions","Color","colors","propsStatsContainer","position","bottom","right","FaceMesh","canvasRef","statsRef","facingMode","loopPredictions","estimateFaces","returnTensors","flipHorizontal","input","predictions","p","annotations","setHex","length","push","g","setAttribute","Float32BufferAttribute","computeBoundingSphere","attributes","needsUpdate","render","update","loadModel","faceLandmarksDetection","mediapipeFacemesh","srcObject","onloadedmetadata","play","PerspectiveCamera","z","texture","TextureLoader","WebGLRenderer","canvas","alpha","setSize","material","PointsMaterial","size","vertexColors","Points","add","Stats","appendChild","dom","end","autoPlay","top","left","SentimentAnalysis","setModel","modelToxicity","setModelToxicity","metadata","setMetadata","loadingScore","setLoadingScore","score","setScore","scoreToxicity","setScoreToxicity","state","setState","loadToxicity","loadLayersModel","fetch","json","onAnalyse","e","preventDefault","trimmed","trim","toLowerCase","replace","split","sequence","word","wordIndex","word_index","index_from","finalSequence","Array","max_len","fill","concat","inputTensor","tensor2d","prediction","predict","dataSync","onSubmit","maxLength","autoComplete","onChange","evt","currentTarget","value","fontSize","s","pl","results","every","match","JSON","stringify","probabilities","Audio","audio","getAudioData","ctx","getContext","freqData","Uint8Array","frequencyBinCount","getByteFrequencyData","imageData","getImageData","putImageData","colorValue","max","pow","fillStyle","beginPath","strokeStyle","moveTo","lineTo","stroke","drawCanvas","URL","origin","checkpointURL","metadataURL","recognizer","speechCommands","ensureModelLoaded","classLabels","wordLabels","listen","reduce","acc","_i","classPrediction","Number","scores","toFixed","includeSpectrogram","probabilityThreshold","invokeCallbackOnNoiseAndUnknown","overlapFactor","propsGui","offsetX","offsetY","HandPose","estimateHands","handpose","gui","dat","destroy","RealTimeObjDetection","analyseCamera","save","scale","drawImage","restore","detect","strokeRect","bbox","font","class","measureText","fillRect","fillText","cocoSsd","BASEPATH","require","homepage","component","exact","App","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultButton","outline","theme","space","fonts","body","heading","monospace","fontSizes","fontWeights","bold","lineHeights","sizes","container","layout","section","buttons","primary","cursor","bg","transition","secondary","gray","green","muted","code","links","textDecoration","nav","mr","my","default","styles","root","fontFamily","lineHeight","letterSpacing","h1","h2","h3","h4","h5","h6","pre","overflowX","borderRadius","spinner","table","borderCollapse","borderSpacing","th","textAlign","borderBottomStyle","td","hr","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4c58019.chunk.js","sourcesContent":["import { data, nextFrame } from '@tensorflow/tfjs'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Box, Button, Flex, Container, Heading } from 'theme-ui'\nimport * as knn from '@tensorflow-models/knn-classifier'\nimport * as mobilenet from '@tensorflow-models/mobilenet'\nimport { Error, Loading } from '../components'\n\nconst CAMERA_SCALE = 1.2\nconst POSES = ['left', 'up', 'down', 'center', 'right'].sort((a, b) => a.localeCompare(b))\nlet raf: number | undefined\n\nconst TransferLearning = () => {\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const [modelMobilenet, setModelMobilenet] = useState<mobilenet.MobileNet>()\n  const [modelKnn, setModelKnn] = useState<knn.KNNClassifier>()\n  const [webcam, setWebcam] = useState<any>()\n  const [result, setResult] = useState<JSX.Element>()\n  const [takingPictures, setTakingPictures] = useState<boolean>(false)\n  const [takenPoses, setTakenPoses] = useState<any[]>([])\n  const [allPoses, setAllPoses] = useState<boolean>(false)\n  const [error, setError] = useState<boolean>(false)\n\n  const stopLoopDetection = () => {\n    if (raf) window.cancelAnimationFrame(raf)\n    raf = undefined\n  }\n\n  const addExample = async (classId: number | string) => {\n    setTakingPictures(true)\n    let i = 0\n\n    while (i < 15) {\n      const img = await webcam.capture()\n      const activation = modelMobilenet?.infer(img)\n\n      if (activation) modelKnn?.addExample(activation, classId)\n\n      img.dispose()\n      i++\n      await nextFrame()\n    }\n\n    const poses = [...takenPoses, classId].sort((a, b) => a.localeCompare(b))\n    setTakenPoses(poses)\n    setTakingPictures(false)\n\n    if (poses.toString() === POSES.toString()) {\n      setAllPoses(true)\n    }\n  }\n\n  const loopDetection = async () => {\n    if (!modelKnn) return\n    if (modelKnn.getNumClasses() > 0) {\n      const img = await webcam.capture()\n      const activation = modelMobilenet?.infer(img)\n      const result = await modelKnn?.predictClass(activation!)\n\n      setResult(\n        <Box>\n          <Box mb={2} sx={{ fontWeight: 'bold' }}>\n            {result.label}\n          </Box>\n          {Object.keys(result.confidences).map((a, index) => (\n            <Box key={index}>\n              {a}: {result.confidences[a]}\n            </Box>\n          ))}\n        </Box>\n      )\n\n      img.dispose()\n    }\n\n    raf = window.requestAnimationFrame(loopDetection)\n  }\n\n  const startLoopDetection = () => {\n    loopDetection()\n  }\n\n  const loadModels = async (video: HTMLVideoElement) => {\n    try {\n      setModelMobilenet(await mobilenet.load())\n      setModelKnn(await knn.create())\n      setWebcam(await data.webcam(video))\n    } catch (e) {\n      console.log(e)\n      setError(true)\n    }\n  }\n\n  useEffect(() => {\n    if (videoRef.current) loadModels(videoRef.current)\n\n    return () => {\n      stopLoopDetection()\n    }\n  }, [videoRef])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Transfer Learning</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Teach the machine all five head positions to start the position analysis.\n      </Heading>\n      {error ? (\n        <Error />\n      ) : (\n        <>\n          {(!modelKnn || !modelMobilenet) && (\n            <Loading text=\"Loading Mobilenet and KNN Tensorflow Models\" />\n          )}\n          <Box sx={{ maxWidth: 640 * CAMERA_SCALE }}>\n            <Box>\n              <video\n                style={{\n                  transform: 'scaleX(-1)',\n                }}\n                width={640 * CAMERA_SCALE}\n                height={480 * CAMERA_SCALE}\n                ref={videoRef}\n              />\n            </Box>\n            {modelKnn && modelMobilenet && (\n              <>\n                <Box\n                  mt={3}\n                  sx={{\n                    opacity: takingPictures ? 0.5 : 1,\n                    pointerEvents: takingPictures ? 'none' : 'visible',\n                  }}\n                >\n                  {!allPoses && (\n                    <Box>\n                      <Flex sx={{ mt: 3, justifyContent: 'space-between' }}>\n                        <Button onClick={() => addExample('left')} variant=\"secondary\">\n                          Left\n                        </Button>\n                        <Button onClick={() => addExample('up')} variant=\"secondary\">\n                          Up\n                        </Button>\n                        <Button onClick={() => addExample('center')} variant=\"secondary\">\n                          Center\n                        </Button>\n                        <Button onClick={() => addExample('down')} variant=\"secondary\">\n                          Down\n                        </Button>\n                        <Button onClick={() => addExample('right')} variant=\"secondary\">\n                          Right\n                        </Button>\n                      </Flex>\n                    </Box>\n                  )}\n                  {allPoses && (\n                    <Button variant=\"primary\" onClick={startLoopDetection} mt={2}>\n                      Detect head position\n                    </Button>\n                  )}\n                </Box>\n                <Box mt={3}>{result}</Box>\n              </>\n            )}\n          </Box>\n        </>\n      )}\n    </Container>\n  )\n}\n\nexport default TransferLearning\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Box, Container, Heading } from 'theme-ui'\nimport * as faceLandmarksDetection from '@tensorflow-models/face-landmarks-detection'\n\nimport Stats from 'three/examples/jsm/libs/stats.module'\nimport {\n  Scene,\n  PerspectiveCamera,\n  BufferGeometry,\n  Float32BufferAttribute,\n  WebGLRenderer,\n  PointsMaterial,\n  Points,\n  Color,\n  TextureLoader,\n} from 'three'\n\nimport { Error, Loading } from '../components'\nimport { removeUserMedia, useUserMedia } from '../hooks'\nimport { PALLETE } from '../common'\n\nlet raf = 0\n\nconst CAMERA_SCALE = 1.25\nconst WIDTH = 640 * CAMERA_SCALE\nconst HEIGHT = 360 * CAMERA_SCALE\n\nlet model: faceLandmarksDetection.FaceLandmarksPackage\n\nconst scene = new Scene()\nlet camera: PerspectiveCamera\nlet renderer: WebGLRenderer\nconst geometry = new BufferGeometry()\nlet positions: number[] = []\nconst color: Color = new Color()\nlet colors: number[] = []\nlet points: Points\nlet stats: Stats\n\nconst propsStatsContainer = {\n  position: 'absolute',\n  bottom: 0,\n  right: 0,\n  '& > div': {\n    position: 'static !important',\n  },\n}\n\nconst FaceMesh = () => {\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const statsRef = useRef<HTMLDivElement>(null)\n  const [error, setError] = useState<boolean>(false)\n  const [loading, setLoading] = useState<boolean>(false)\n  const [media] = useUserMedia({\n    video: {\n      facingMode: 'user',\n      width: WIDTH,\n      height: HEIGHT,\n    },\n  })\n\n  const loopPredictions = useCallback(async () => {\n    try {\n      if (!model || !videoRef.current || !canvasRef.current) {\n        raf = requestAnimationFrame(loopPredictions)\n        return\n      }\n\n      const predictions = await model.estimateFaces({\n        returnTensors: false,\n        flipHorizontal: false,\n        input: videoRef.current,\n      })\n\n      positions = []\n      colors = []\n\n      const { width, height } = canvasRef.current\n      predictions?.forEach(p => {\n        //@ts-ignore\n        const { annotations } = p\n\n        Object.keys(annotations).forEach((a, index) => {\n          color.setHex(PALLETE[index % (PALLETE.length - 1)])\n          annotations[a].forEach((i: number[]) => {\n            positions.push(i[0] - width / 2, height / 2 - i[1], -i[2])\n            colors.push(color.r, color.g, color.b)\n          })\n        })\n      })\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positions, 3))\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3))\n      geometry.computeBoundingSphere()\n      points.geometry.attributes.position.needsUpdate = true\n\n      renderer.render(scene, camera)\n      stats.update()\n    } catch (e) {\n      console.log(e)\n    }\n\n    raf = requestAnimationFrame(loopPredictions)\n  }, [])\n\n  const loadModel = useCallback(async () => {\n    try {\n      setLoading(true)\n      model = await faceLandmarksDetection.load(\n        faceLandmarksDetection.SupportedPackages.mediapipeFacemesh\n      )\n\n      setLoading(false)\n      loopPredictions()\n    } catch (e) {\n      setLoading(false)\n      setError(true)\n    }\n  }, [loopPredictions])\n\n  useEffect(() => {\n    if (!videoRef.current || !media) return\n    videoRef.current.srcObject = media\n    videoRef.current.onloadedmetadata = () => {\n      videoRef.current?.play()\n\n      if (!canvasRef.current) return\n      const { width, height } = canvasRef.current\n\n      camera = new PerspectiveCamera(60, width / height, 0.1, 1000)\n      camera.position.z = width / 2\n\n      const texture = new TextureLoader().load(\n        'https://raw.githubusercontent.com/mrdoob/three.js/master/examples/textures/sprites/disc.png'\n      )\n      //\n\n      renderer = new WebGLRenderer({\n        canvas: canvasRef.current!,\n        alpha: true,\n      })\n\n      renderer.setSize(width, height)\n\n      const material = new PointsMaterial({ size: 10, vertexColors: true, map: texture })\n\n      points = new Points(geometry, material)\n      scene.add(points)\n\n      if (!stats) {\n        stats = Stats()\n        statsRef.current?.appendChild(stats.dom)\n      }\n\n      loadModel()\n    }\n\n    return () => {\n      cancelAnimationFrame(raf)\n      removeUserMedia(media)\n      stats?.end()\n    }\n  }, [media, loadModel, videoRef, canvasRef, statsRef])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Face Mesh</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Create the face mesh of the detected face on the camera feed. <br />\n        <br />\n        Each color group represents one feature of the face being mapped, which means we can get the\n        positons individually.\n      </Heading>\n      {error ? (\n        <Error />\n      ) : (\n        <>\n          {loading && (\n            <Box mt={2}>\n              <Loading text=\"Loading Face Landmarks Model\" />\n            </Box>\n          )}\n          <Box sx={{ position: 'relative', mt: 2 }}>\n            <video style={{ opacity: 0.4 }} autoPlay ref={videoRef} width={WIDTH} height={HEIGHT} />\n            <canvas\n              ref={canvasRef}\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n              }}\n              width={WIDTH}\n              height={HEIGHT}\n            />\n          </Box>\n        </>\n      )}\n      <Box\n        //@ts-ignore\n        sx={propsStatsContainer}\n        ref={statsRef}\n      />\n    </Container>\n  )\n}\n\nexport default FaceMesh\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Box, Container, Heading } from 'theme-ui'\nimport * as handpose from '@tensorflow-models/handpose'\nimport Stats from 'three/examples/jsm/libs/stats.module'\nimport {\n  Scene,\n  PerspectiveCamera,\n  BufferGeometry,\n  Float32BufferAttribute,\n  WebGLRenderer,\n  PointsMaterial,\n  Points,\n  Color,\n  TextureLoader,\n} from 'three'\n\nimport * as dat from 'dat.gui'\n\nimport { Error, Loading } from '../components'\nimport { useUserMedia, removeUserMedia } from '../hooks'\nimport { PALLETE } from '../common'\n\nconst CAMERA_SCALE = 1.25\nlet model: handpose.HandPose | undefined = undefined\nlet raf = 0\n\nconst scene = new Scene()\nlet camera: PerspectiveCamera\nlet renderer: WebGLRenderer\nconst geometry = new BufferGeometry()\nlet positions: number[] = []\nconst color: Color = new Color()\nlet colors: number[] = []\nlet points: Points\nlet stats: Stats\n\nconst propsStatsContainer = {\n  position: 'absolute',\n  bottom: 0,\n  right: 0,\n  '& > div': {\n    position: 'static !important',\n  },\n}\n\nconst propsGui = {\n  offsetX: -215,\n  offsetY: 137,\n}\n\nconst HandPose = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const statsRef = useRef<HTMLDivElement>(null)\n  const [loading, setLoading] = useState(true)\n  const [stream] = useUserMedia({ video: true })\n  const [error, setError] = useState<boolean>(false)\n\n  const estimateHands = useCallback(async () => {\n    try {\n      const predictions = videoRef.current && (await model?.estimateHands(videoRef.current))\n\n      if (canvasRef.current) {\n        positions = []\n        colors = []\n        const { width, height } = canvasRef.current\n        predictions?.forEach(p => {\n          Object.keys(p.annotations).forEach((a, index) => {\n            color.setHex(PALLETE[index % (PALLETE.length - 1)])\n            p.annotations[a].forEach(i => {\n              positions.push(\n                i[0] - width / 2 + propsGui.offsetX,\n                height / 2 - i[1] + propsGui.offsetY,\n                -i[2]\n              )\n              colors.push(color.r, color.g, color.b)\n            })\n          })\n        })\n\n        geometry.setAttribute('position', new Float32BufferAttribute(positions, 3))\n        geometry.setAttribute('color', new Float32BufferAttribute(colors, 3))\n        geometry.computeBoundingSphere()\n        points.geometry.attributes.position.needsUpdate = true\n      }\n\n      renderer.render(scene, camera)\n      stats.update()\n      raf = requestAnimationFrame(estimateHands)\n    } catch (e) {\n      console.log(e)\n    }\n  }, [])\n\n  const loadModel = useCallback(async () => {\n    try {\n      setLoading(true)\n      model = await handpose.load()\n      setLoading(false)\n      estimateHands()\n    } catch (e) {\n      setError(true)\n      console.log(e)\n    }\n  }, [setLoading, estimateHands])\n\n  useEffect(() => {\n    if (!videoRef.current || !canvasRef.current || !stream) return\n    videoRef.current.srcObject = stream\n    videoRef.current.onloadedmetadata = () => {\n      videoRef.current!.play()\n      loadModel()\n    }\n\n    const { width, height } = canvasRef.current\n\n    camera = new PerspectiveCamera(90, width / height, 0.1, 1000)\n    camera.position.z = width / 2\n\n    const texture = new TextureLoader().load(\n      'https://raw.githubusercontent.com/mrdoob/three.js/master/examples/textures/sprites/disc.png'\n    )\n    //\n\n    renderer = new WebGLRenderer({\n      canvas: canvasRef.current,\n      alpha: true,\n    })\n\n    renderer.setSize(width, height)\n\n    const material = new PointsMaterial({ size: 20, vertexColors: true, map: texture })\n\n    points = new Points(geometry, material)\n    scene.add(points)\n\n    if (!stats) {\n      stats = Stats()\n      statsRef.current?.appendChild(stats.dom)\n    }\n\n    const gui = new dat.GUI()\n    gui.add(propsGui, 'offsetX', -300, 300, 1)\n    gui.add(propsGui, 'offsetY', -300, 300, 1)\n\n    return () => {\n      gui.destroy()\n      cancelAnimationFrame(raf)\n      removeUserMedia(stream)\n      raf = 0\n      stats.end()\n    }\n  }, [canvasRef, videoRef, stream, loadModel])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Hand Mesh</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Put your hand where the camera can see and start tracking and tracing your hand mesh.\n        <br />\n        <br />\n        Each color group represents one feature of the hand being mapped, which means we can get the\n        positons individually.\n      </Heading>\n      {error ? (\n        <Error />\n      ) : (\n        <>\n          {loading && (\n            <Box mt={2}>\n              <Loading text=\"Loading Hand Pose Model\" />\n            </Box>\n          )}\n          <Box sx={{ mt: 2, position: 'relative' }}>\n            <video\n              style={{ opacity: 0.4, transform: 'scaleX(-1)' }}\n              ref={videoRef}\n              width={640 * CAMERA_SCALE}\n              height={360 * CAMERA_SCALE}\n            />\n            <canvas\n              style={{ transform: 'scaleX(-1)', position: 'absolute', top: 0, left: 0 }}\n              ref={canvasRef}\n              width={640 * CAMERA_SCALE}\n              height={360 * CAMERA_SCALE}\n            />\n          </Box>\n        </>\n      )}\n      <Box\n        //@ts-ignore\n        sx={propsStatsContainer}\n        ref={statsRef}\n      />\n    </Container>\n  )\n}\n\nexport default HandPose\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Box, Container, Heading } from 'theme-ui'\nimport * as cocoSsd from '@tensorflow-models/coco-ssd'\nimport Stats from 'three/examples/jsm/libs/stats.module'\n\nimport { Error, Loading } from '../components'\nimport { useUserMedia, removeUserMedia } from '../hooks'\n\nconst CAMERA_SCALE = 1.5\nlet raf = 0\nlet model: cocoSsd.ObjectDetection\nlet stats: Stats\nlet ctx: CanvasRenderingContext2D | null = null\n\nconst propsStatsContainer = {\n  position: 'absolute',\n  bottom: 0,\n  right: 0,\n  '& > div': {\n    position: 'static !important',\n  },\n}\n\nconst RealTimeObjDetection = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const statsRef = useRef<HTMLDivElement>(null)\n  const [loading, setLoading] = useState(true)\n  const [stream] = useUserMedia({ video: true })\n  const [error, setError] = useState<boolean>(false)\n\n  const analyseCamera = useCallback(async () => {\n    try {\n      if (ctx && videoRef.current && canvasRef.current) {\n        ctx.save()\n        ctx.scale(-1, 1)\n        ctx.drawImage(videoRef.current, 0, 0, 640 * CAMERA_SCALE * -1, 360 * CAMERA_SCALE)\n        ctx.restore()\n        const predictions = await model.detect(canvasRef.current)\n        predictions.forEach(p => {\n          if (!ctx) return\n\n          ctx.beginPath()\n          ctx.strokeRect(p.bbox[0], p.bbox[1], p.bbox[2], p.bbox[3])\n          ctx.stroke()\n\n          ctx.font =\n            '14px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"'\n\n          const text = `${p.class}: ${Math.round(p.score * 100)}%`\n\n          const { width } = ctx.measureText(text)\n          ctx.fillStyle = '#000'\n          ctx.fillRect(p.bbox[0] - 1, p.bbox[1] - 30, width + 10, 30)\n\n          ctx.fillStyle = '#fff'\n          ctx.fillText(text, p.bbox[0] + 5, p.bbox[1] - 10)\n        })\n      }\n\n      stats.update()\n      raf = requestAnimationFrame(analyseCamera)\n    } catch (e) {\n      console.log(e)\n    }\n  }, [])\n\n  const loadModel = useCallback(async () => {\n    try {\n      setLoading(true)\n      model = await cocoSsd.load()\n      setLoading(false)\n      analyseCamera()\n    } catch (e) {\n      setError(true)\n      console.log(e)\n    }\n  }, [setLoading, analyseCamera])\n\n  useEffect(() => {\n    if (!videoRef.current || !canvasRef.current || !stream) return\n    videoRef.current.srcObject = stream\n    videoRef.current.onloadedmetadata = () => {\n      videoRef?.current?.play()\n      loadModel()\n    }\n\n    ctx = canvasRef.current.getContext('2d')\n\n    if (!stats) {\n      stats = Stats()\n      statsRef.current?.appendChild(stats.dom)\n    }\n\n    return () => {\n      cancelAnimationFrame(raf)\n      removeUserMedia(stream)\n      raf = 0\n    }\n  }, [canvasRef, videoRef, stream, loadModel])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Real-time Object Detection</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Real-time object detection through webcam feed using coco-ssd Model\n      </Heading>\n      {error ? (\n        <Error />\n      ) : (\n        <>\n          {loading && <Loading text=\"Loading Coco-SSD Model\" />}\n          <Box sx={{ position: 'relative' }}>\n            <video\n              style={{ opacity: 0.4, transform: 'scaleX(-1)' }}\n              ref={videoRef}\n              width={640 * CAMERA_SCALE}\n              height={360 * CAMERA_SCALE}\n            />\n            <canvas\n              style={{ position: 'absolute', top: 0, left: 0 }}\n              ref={canvasRef}\n              width={640 * CAMERA_SCALE}\n              height={360 * CAMERA_SCALE}\n            />\n          </Box>\n        </>\n      )}\n      <Box\n        //@ts-ignore\n        sx={propsStatsContainer}\n        ref={statsRef}\n      />\n    </Container>\n  )\n}\n\nexport default RealTimeObjDetection\n","import React from 'react'\nimport { Box, Container, Text, Heading, Link, Divider } from 'theme-ui'\n\nconst Home = () => {\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Hello World</Heading>\n      <Text>\n        This is a series of Machine Learning experiments using{' '}\n        <Link href=\"https://www.tensorflow.org/js\" target=\"_blank\">\n          TensorFlow.js\n        </Link>\n        ,{' '}\n        <Link href=\"https://threejs.org\" target=\"_blank\">\n          Three.js\n        </Link>\n        ,{' '}\n        <Link href=\"https://reactjs.org\" target=\"_blank\">\n          React\n        </Link>{' '}\n        and{' '}\n        <Link href=\"https://theme-ui.com\" target=\"_blank\">\n          Theme-ui\n        </Link>{' '}\n        by{' '}\n        <Link variant=\"text\" href=\"https://s2paganini.com\" target=\"_blank\">\n          Silvio Paganini\n        </Link>\n        .\n      </Text>\n      <Text>\n        <Text as=\"span\" sx={{ color: 'green' }}>\n          &#x2190;\n        </Text>{' '}\n        Choose the experiments on the left menu to start ⚡\n      </Text>\n      <Divider />\n      <Heading as=\"h3\" variant=\"styles.h3\" sx={{ mt: 4 }}>\n        How to run it locally\n      </Heading>\n      <Text>\n        <Text as=\"span\" sx={{ color: 'green' }}>\n          1)\n        </Text>{' '}\n        Clone the git repository{' '}\n        <Box as=\"pre\" variant=\"styles.pre\">\n          <code>$ git clone git@github.com:silviopaganini/tensorflow-study.git</code>\n        </Box>\n      </Text>\n      <Text>\n        <Text as=\"span\" sx={{ color: 'green' }}>\n          2)\n        </Text>{' '}\n        Install the packages and run\n        <Box as=\"pre\" variant=\"styles.pre\">\n          <code>\n            $ yarn install\n            <br />$ yarn start\n          </code>\n        </Box>\n      </Text>\n      <Heading as=\"h3\" variant=\"styles.h3\" sx={{ mt: 4 }}>\n        Contribute\n      </Heading>\n      <Text>\n        PRs are welcome! Don't forget to fill out a description of your PR. <br />\n        View source on{' '}\n        <Link href=\"https://github.com/silviopaganini/tensorflow-study\" target=\"_blank\">\n          Github\n        </Link>\n        .\n      </Text>\n      <Heading as=\"h3\" variant=\"styles.h3\" sx={{ mt: 4 }}>\n        ❗ Disclaimer\n      </Heading>\n      <Text>\n        All experiments were heavily tested on a good spec machine on Chrome and Opera.\n        <br />\n        Some experimemts might make your machine fans go crazy 😁 or just not work at all depending\n        on your configuration.\n      </Text>\n    </Container>\n  )\n}\n\nexport default Home\n","import React, { RefAttributes, PropsWithoutRef, ForwardRefExoticComponent } from 'react'\nimport { Link as RouterLink, LinkProps as RouterLinkProps } from 'react-router-dom'\nimport { NavLink as ThemeUILink, NavLinkProps as ThemedUILinkProps } from 'theme-ui'\n\n/**\n * @see https://www.reactjunkie.com/theme-ui-react-router-link-typescript\n */\n\ntype ForwardRef<T, P> = ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>\n\nexport type CustomLinkCombinedProps = ThemedUILinkProps & RouterLinkProps<{}>\nexport const CustomLink: ForwardRef<HTMLAnchorElement, CustomLinkCombinedProps> = ThemeUILink\n\nconst Link = ({ children, ...props }: CustomLinkCombinedProps) => {\n  return (\n    <CustomLink as={RouterLink} {...props}>\n      {children}\n    </CustomLink>\n  )\n}\n\nexport default Link\n","import { useLocation } from 'react-router-dom'\nimport { Flex } from 'theme-ui'\nimport { Link } from '..'\nimport Routes from '../../routes'\n\nconst Nav = () => {\n  const location = useLocation()\n\n  return (\n    <Flex\n      as=\"nav\"\n      sx={{\n        flexDirection: 'column',\n        px: 3,\n        py: 4,\n        background: 'linear-gradient(180deg, #111 0%, #222 100%)',\n        minHeight: '100vh',\n        minWidth: '230px',\n        width: '230px',\n      }}\n    >\n      {Routes.map(r => {\n        return (\n          <Link\n            key={r.name}\n            variant=\"links.nav\"\n            sx={{\n              color: location.pathname === r.path ? 'green' : 'primary',\n              pointerEvents: location.pathname === r.path ? 'none' : 'visible',\n            }}\n            to={r.path}\n          >\n            {r.name}\n          </Link>\n        )\n      })}\n    </Flex>\n  )\n}\n\nexport default Nav\n","import React from 'react'\nimport { Flex, Spinner, Label } from 'theme-ui'\n\ntype LoadingProps = {\n  text?: string\n}\n\nconst Loading = ({ text = 'Loading' }: LoadingProps) => (\n  <Flex>\n    <Flex sx={{ alignItems: 'center', py: 2 }}>\n      <Spinner variant=\"styles.spinner\" />\n      <Label>{text}</Label>\n    </Flex>\n  </Flex>\n)\n\nexport default Loading\n","import React from 'react'\nimport { Flex, Text, Box } from 'theme-ui'\n\ntype ErrorProps = {\n  text?: string\n}\n\nconst Error = ({ text = 'Some error has occurred, please refresh your page' }: ErrorProps) => (\n  <Box>\n    <Flex sx={{ alignItems: 'center', py: 2 }}>\n      <Text>{text}</Text>\n    </Flex>\n  </Box>\n)\n\nexport default Error\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { data, Tensor3D } from '@tensorflow/tfjs'\nimport * as mobilenet from '@tensorflow-models/mobilenet'\nimport { Box, Button, Heading, Container } from 'theme-ui'\nimport { Error, Loading } from '../components'\n\nconst CAMERA_SCALE = 1.2\n\nconst Webcam = () => {\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const [modelMobilenet, setModelMobilenet] = useState<mobilenet.MobileNet>()\n  const [loading, setLoading] = useState<boolean>(false)\n  const [error, setError] = useState<boolean>(false)\n  const [result, setResult] = useState<JSX.Element[]>()\n\n  const classify = useCallback(\n    (img: Tensor3D) => {\n      const load = async (img: Tensor3D) => {\n        if (!modelMobilenet) {\n          setResult(undefined)\n          return\n        }\n\n        try {\n          setLoading(true)\n          const output = await modelMobilenet.classify(img)\n          const outputList = output.map((o, index) => (\n            <Box key={index}>\n              <b>{o.className}</b> - {`${Math.round(o.probability * 100)}%`}\n            </Box>\n          ))\n\n          setResult(outputList)\n          setLoading(false)\n\n          img.dispose()\n        } catch (e) {\n          setLoading(false)\n          setResult(undefined)\n          console.log(e)\n        }\n      }\n      load(img)\n    },\n    [modelMobilenet]\n  )\n\n  const onCapture = async () => {\n    if (!videoRef.current) return\n    try {\n      const webcam = await data.webcam(videoRef.current)\n      const img = await webcam.capture()\n      classify(img)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const loadModels = async () => {\n    try {\n      setModelMobilenet(await mobilenet.load())\n      const loadCam = async (video: HTMLVideoElement) => {\n        await data.webcam(video)\n      }\n      if (videoRef.current) loadCam(videoRef.current)\n      setLoading(false)\n    } catch (e) {\n      console.log(e)\n      setError(true)\n    }\n  }\n\n  useEffect(() => {\n    loadModels()\n  }, [videoRef])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Webcam object detection</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Hold an object in front of your camera and click on \"Capture\" to analyse the camera feed\n      </Heading>\n      {error ? (\n        <Error />\n      ) : modelMobilenet ? (\n        <>\n          <Box mb={4}>\n            <video\n              style={{\n                transform: 'scaleX(-1)',\n              }}\n              width={640 * CAMERA_SCALE}\n              height={480 * CAMERA_SCALE}\n              ref={videoRef}\n            ></video>\n          </Box>\n          <Button onClick={onCapture} variant=\"primary\">\n            Capture\n          </Button>\n          {loading && <Loading text=\"Analysing\" />}\n          {result && <Box mt={3}>{result}</Box>}\n        </>\n      ) : (\n        <Loading text=\"Loading Mobilenet Tensorflow Models\" />\n      )}\n    </Container>\n  )\n}\n\nexport default Webcam\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Box, Image, Button, Heading, Container } from 'theme-ui'\nimport * as mobilenet from '@tensorflow-models/mobilenet'\nimport { Loading, Error } from '../components'\n\nconst ImageDetection = () => {\n  const ref = useRef<HTMLImageElement>(null)\n  const [loading, setLoading] = useState<boolean>(false)\n  const [modelMobilenet, setModelMobilenet] = useState<mobilenet.MobileNet>()\n  const [error, setError] = useState<boolean>(false)\n  const [key, setKey] = useState<number>(0)\n  const [result, setResult] = useState<JSX.Element[]>()\n\n  const classify = useCallback(\n    (img: HTMLImageElement) => {\n      const load = async (img: HTMLImageElement) => {\n        if (!modelMobilenet) {\n          setLoading(false)\n          setResult(undefined)\n          return\n        }\n\n        try {\n          setLoading(true)\n          const output = await modelMobilenet.classify(img)\n          const outputList = output.map((o, index) => (\n            <Box key={index}>\n              <b>{o.className}</b> - {`${Math.round(o.probability * 100)}%`}\n            </Box>\n          ))\n\n          setResult(outputList)\n          setLoading(false)\n        } catch (e) {\n          setLoading(false)\n          setResult(undefined)\n          console.log(e)\n        }\n      }\n      load(img)\n    },\n    [modelMobilenet]\n  )\n\n  const onLoadImage = () => {\n    if (ref.current) classify(ref.current)\n  }\n\n  const loadModels = async () => {\n    try {\n      setModelMobilenet(await mobilenet.load())\n      setLoading(false)\n    } catch (e) {\n      console.log(e)\n      setError(true)\n    }\n  }\n\n  useEffect(() => {\n    loadModels()\n  }, [])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Random Image Detection</Heading>\n      {error ? (\n        <Error />\n      ) : modelMobilenet ? (\n        <Container>\n          <Image\n            onLoad={onLoadImage}\n            key={key}\n            ref={ref}\n            alt=\"cat\"\n            crossOrigin=\"anonymous\"\n            src={`https://loremflickr.com/1000/700/nature?lock=${key}`}\n            sx={{ maxHeight: 700, width: 'auto' }}\n          />\n          {result && <Box mt={3}>{result}</Box>}\n          <Button\n            mt={3}\n            variant=\"primary\"\n            sx={{ pointerEvents: loading ? 'none' : 'visible', opacity: loading ? 0.5 : 1 }}\n            onClick={() => {\n              setLoading(true)\n              setResult(undefined)\n              setKey(key + 1)\n            }}\n          >\n            {loading ? 'Loading...' : 'Try a new image'}\n          </Button>\n        </Container>\n      ) : (\n        <Loading text=\"Loading Mobilenet Tensorflow Models\" />\n      )}\n    </Container>\n  )\n}\n\nexport default ImageDetection\n","import { useEffect, useState } from 'react'\n\nconst useAnalyser = (stream?: MediaStream, fftSize: number = 1024) => {\n  const [analyser, setAnalyser] = useState<AnalyserNode>()\n\n  useEffect(() => {\n    if (!stream || analyser) return\n\n    const audioctx = new AudioContext()\n    const source = audioctx.createMediaStreamSource(stream)\n    const a = audioctx.createAnalyser()\n    a.smoothingTimeConstant = 0\n\n    source.connect(a)\n    a.fftSize = fftSize\n    setAnalyser(a)\n  }, [stream, fftSize, analyser])\n\n  return analyser\n}\n\nexport default useAnalyser\n","import { useEffect, useState } from 'react'\n\nconst useUserMedia = (props: MediaStreamConstraints): [MediaStream?, Error?] => {\n  const [media, setMedia] = useState<MediaStream>()\n  const [error, setError] = useState<Error>()\n\n  useEffect(() => {\n    if (media) return\n    const getMedia = async () => {\n      try {\n        const m = await navigator.mediaDevices.getUserMedia(props)\n        m.addEventListener('removetrack', () => {\n          console.log('removetrack')\n        })\n        setMedia(m)\n      } catch (e) {\n        setError(e)\n      }\n    }\n\n    getMedia()\n  }, [props, media])\n  return [media, error]\n}\n\nexport const removeUserMedia = (media?: MediaStream) => {\n  media?.getTracks().forEach(m => {\n    m.stop()\n    media.removeTrack(m)\n  })\n}\n\nexport default useUserMedia\n","export const PALLETE = [\n  0xedae49,\n  0xd1495b,\n  0x00798c,\n  0x30638e,\n  0x003d5b,\n  0x4b3f72,\n  0xe9190f,\n  0xf75c03,\n  0xf1c40f,\n  0xfe5f55,\n]\n","import { LayersModel, loadLayersModel, tensor2d } from '@tensorflow/tfjs'\nimport React, { ChangeEvent, FormEvent, useEffect, useState } from 'react'\nimport { Container, Box, Button, Heading, Input, Text } from 'theme-ui'\nimport { ToxicityClassifier, load as loadToxicity } from '@tensorflow-models/toxicity'\nimport { Loading, Error } from '../components'\n\nconst MODEL_URL = 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json'\nconst METADATA_URL =\n  'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json'\n\nconst SentimentAnalysis = () => {\n  const [model, setModel] = useState<LayersModel>()\n  const [modelToxicity, setModelToxicity] = useState<ToxicityClassifier>()\n  const [metadata, setMetadata] = useState<any>()\n  const [loading, setLoading] = useState<boolean>(false)\n  const [loadingScore, setLoadingScore] = useState<boolean>(false)\n  const [score, setScore] = useState<number>()\n  const [scoreToxicity, setScoreToxicity] = useState<any[]>()\n  const [state, setState] = useState<string>(\n    'This is really the most useless talk I have ever watched'\n  )\n  const [error, setError] = useState<boolean>(false)\n\n  const loadModel = async () => {\n    try {\n      setLoading(true)\n      setModelToxicity(await loadToxicity(0.9, []))\n      setModel(await loadLayersModel(MODEL_URL))\n      setMetadata(await (await fetch(METADATA_URL)).json())\n      setLoading(false)\n    } catch (e) {\n      setError(true)\n    }\n  }\n\n  const onChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    setState(evt.currentTarget.value)\n  }\n\n  const onAnalyse = async (e: FormEvent | MouseEvent) => {\n    e.preventDefault()\n    if (!metadata || !model) return\n\n    setLoadingScore(true)\n    setScore(undefined)\n    setScoreToxicity(undefined)\n\n    const trimmed = state\n      .trim()\n      .toLowerCase()\n      .replace(/(\\.|,|!\\?)/g, '')\n      .split(' ')\n\n    const sequence = trimmed.map(word => {\n      const wordIndex = metadata.word_index[word]\n      if (typeof wordIndex === 'undefined') {\n        return 2\n      }\n      return wordIndex + metadata.index_from\n    })\n\n    const finalSequence = new Array(metadata.max_len - sequence.length).fill(0).concat(sequence)\n\n    const inputTensor = tensor2d(finalSequence, [1, metadata.max_len])\n    const prediction = model.predict(inputTensor)\n    //@ts-ignore\n    setScore(prediction.dataSync()[0])\n    //@ts-ignore\n    prediction.dispose()\n\n    setScoreToxicity(await modelToxicity?.classify([state]))\n    setLoadingScore(false)\n  }\n\n  useEffect(() => {\n    loadModel()\n  }, [])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Sentiment analysis</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Analyse text sentiment and toxicity.\n      </Heading>\n      {error ? (\n        <Error />\n      ) : (\n        <>\n          {loading && <Loading text=\"Loading Sentiment and Toxicity models\" />}\n          {!loading && (\n            <>\n              <Box as=\"form\" sx={{ position: 'relative' }} onSubmit={onAnalyse}>\n                <Input\n                  maxLength={100}\n                  autoComplete=\"off\"\n                  mt={3}\n                  onChange={onChange}\n                  value={state}\n                  name=\"input\"\n                />\n                <Box sx={{ position: 'absolute', bottom: -25, right: '2px', fontSize: 0 }}>\n                  {state.length}/100\n                </Box>\n              </Box>\n              {score && scoreToxicity && (\n                <Box mt={2}>\n                  <Text>\n                    <Heading mt={4} as=\"h3\">\n                      Sentiment Score:\n                    </Heading>\n                    <Text\n                      as=\"span\"\n                      mt={3}\n                      sx={{\n                        color: score > 0.66 ? 'green' : score < 0.33 ? 'red' : 'orange',\n                      }}\n                    >\n                      {score}\n                    </Text>\n                  </Text>\n                  <Text mt={2}>\n                    <Heading mt={4} as=\"h3\">\n                      Toxicity:\n                    </Heading>\n                    {scoreToxicity?.map((s: any, index: number) => (\n                      <Box\n                        mt={2}\n                        pl={3}\n                        key={index}\n                        sx={{ opacity: s.results.every((a: any) => a.match) ? 1 : 0.4 }}\n                      >\n                        <b>{s.label}</b>:\n                        {s.results.map((r: any, i: number) => (\n                          <Box mt={2} key={i}>\n                            <Text sx={{ pl: 4 }}>\n                              Probabilities: {JSON.stringify(r.probabilities)}\n                            </Text>\n                            <Text sx={{ pl: 4 }}>\n                              Match:{' '}\n                              <Text\n                                as=\"span\"\n                                sx={{\n                                  color: r.match ? 'green' : 'text',\n                                  fontWeight: r.match ? 'bold' : 'normal',\n                                }}\n                              >\n                                {JSON.stringify(r.match)}\n                              </Text>\n                            </Text>\n                          </Box>\n                        ))}\n                      </Box>\n                    ))}\n                  </Text>\n                </Box>\n              )}\n              <Button\n                sx={{\n                  opacity: loadingScore ? 0.4 : 1,\n                  pointerEvents: loadingScore ? 'none' : 'visible',\n                }}\n                mt={4}\n                onClick={onAnalyse}\n              >\n                {!loadingScore ? 'Analyse' : 'Loading...'}\n              </Button>\n            </>\n          )}\n        </>\n      )}\n    </Container>\n  )\n}\n\nexport default SentimentAnalysis\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Box, Text, Container, Heading, Link } from 'theme-ui'\nimport * as speechCommands from '@tensorflow-models/speech-commands'\nimport { useUserMedia, useAnalyser, removeUserMedia } from '../hooks'\nimport { Error, Loading } from '../components'\n\nlet raf = 0\n\nconst Audio = () => {\n  const [media] = useUserMedia({ audio: true })\n  const analyser = useAnalyser(media)\n  const [model, setModel] = useState<speechCommands.SpeechCommandRecognizer>()\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const [error, setError] = useState<boolean>(false)\n  const [result, setResult] = useState<JSX.Element[]>()\n\n  const drawCanvas = (\n    freqData: Uint8Array,\n    ctx: CanvasRenderingContext2D,\n    canvas: HTMLCanvasElement\n  ) => {\n    for (let i = 0; i < freqData.length; i++) {\n      let value = 2 * freqData[i] * 255\n\n      let colorValue = Math.max(0, 255 * value)\n      colorValue = Math.pow(colorValue, 3)\n      colorValue = Math.round(255 * colorValue)\n      const fillStyle = `rgb(${colorValue},${255 - colorValue},${255 - colorValue})`\n\n      ctx.beginPath()\n      ctx.strokeStyle = fillStyle\n      ctx.moveTo(canvas.width - 1, canvas.height - i * (canvas.height / freqData.length))\n\n      ctx.lineTo(\n        canvas.width - 1,\n        canvas.height - (i * canvas.height) / freqData.length + canvas.height / freqData.length\n      )\n      ctx.stroke()\n    }\n  }\n\n  const getAudioData = useCallback(() => {\n    if (!analyser || !canvasRef.current) {\n      raf = requestAnimationFrame(getAudioData)\n      return\n    }\n\n    const ctx = canvasRef.current.getContext('2d')\n\n    if (!ctx) {\n      raf = requestAnimationFrame(getAudioData)\n      return\n    }\n\n    const freqData = new Uint8Array(analyser.frequencyBinCount)\n    analyser.getByteFrequencyData(freqData)\n\n    const imageData = ctx.getImageData(1, 0, canvasRef.current.width - 1, canvasRef.current.height)\n    ctx.putImageData(imageData, 0, 0)\n\n    drawCanvas(freqData, ctx, canvasRef.current)\n\n    raf = requestAnimationFrame(getAudioData)\n  }, [analyser])\n\n  const loadModel = useCallback(async () => {\n    try {\n      const URL = window.location.origin\n      const checkpointURL = `${URL}/model/model.json` // model topology\n      const metadataURL = `${URL}/model/metadata.json` // model metadata\n\n      const recognizer = speechCommands.create(\n        'BROWSER_FFT', // fourier transform type, not useful to change\n        undefined, // speech commands vocabulary feature, not useful when training models with teachable machine\n        checkpointURL,\n        metadataURL\n      )\n\n      // check that model and metadata are loaded via HTTPS requests.\n      await recognizer.ensureModelLoaded()\n\n      setModel(recognizer)\n      const classLabels = recognizer.wordLabels() // get class labels\n\n      getAudioData()\n\n      await recognizer.listen(\n        //@ts-ignore\n        result => {\n          const results = Object.keys(classLabels).reduce((acc, _i, index) => {\n            const classPrediction =\n              classLabels[index] + ': ' + Number(result.scores[index]).toFixed(2)\n            acc.push(\n              <Box sx={{ opacity: result.scores[index] > 0.7 ? 1 : 0.5 }} key={_i}>\n                {classPrediction}\n              </Box>\n            )\n            return acc\n          }, [] as JSX.Element[])\n\n          setResult(results)\n        },\n        {\n          includeSpectrogram: false,\n          probabilityThreshold: 0.75,\n          invokeCallbackOnNoiseAndUnknown: true,\n          overlapFactor: 0.5,\n        }\n      )\n    } catch (e) {\n      setError(true)\n    }\n  }, [setError, getAudioData])\n\n  useEffect(() => {\n    if (!analyser || !canvasRef.current) return\n    loadModel()\n\n    return () => {\n      removeUserMedia(media)\n      cancelAnimationFrame(raf)\n    }\n  }, [canvasRef, analyser, loadModel, media])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Audio Analysis</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Model trained to detect{' '}\n        <Text as=\"span\" sx={{ color: 'green' }}>\n          \"Yes\"\n        </Text>\n        and{' '}\n        <Text as=\"span\" sx={{ color: 'green' }}>\n          \"No\"\n        </Text>{' '}\n        instructions,{' '}\n        <Text as=\"span\" sx={{ color: 'green' }}>\n          clapping\n        </Text>{' '}\n        and{' '}\n        <Text as=\"span\" sx={{ color: 'green' }}>\n          typing\n        </Text>{' '}\n        noises using{' '}\n        <Link href=\"https://teachablemachine.withgoogle.com\" target=\"_blank\">\n          Teachable Machine\n        </Link>{' '}\n        from Google.\n      </Heading>\n      <canvas ref={canvasRef} width={800} height={500} />\n      {error ? (\n        <Error />\n      ) : model ? (\n        <Box>{result || 'listening...'}</Box>\n      ) : (\n        <Loading text=\"Loading SpeechCommand Models\" />\n      )}\n    </Container>\n  )\n}\n\nexport default Audio\n","import {\n  SentimentAnalysis,\n  FaceMesh,\n  Home,\n  ImageDetection,\n  TransferLearning,\n  Webcam,\n  // Audio,\n  HandPose,\n  RealTimeObjDetection,\n  Audio,\n} from '../pages'\n\nconst { homepage: BASEPATH } = require('../../package.json')\n\nconst Routes = [\n  {\n    path: BASEPATH,\n    component: Home,\n    name: 'Home',\n    exact: true,\n  },\n  {\n    path: `${BASEPATH}image-detection`,\n    component: ImageDetection,\n    name: 'Random Image Detection',\n  },\n  {\n    path: `${BASEPATH}realtime-obj-detection`,\n    component: RealTimeObjDetection,\n    name: 'Real-time Detection',\n  },\n  {\n    path: `${BASEPATH}webcam`,\n    component: Webcam,\n    name: 'Snapshot Detection',\n  },\n  {\n    path: `${BASEPATH}transfer-learning`,\n    component: TransferLearning,\n    name: 'Transfer Learning',\n  },\n  {\n    path: `${BASEPATH}sentiment`,\n    component: SentimentAnalysis,\n    name: 'Sentiment Analysis',\n  },\n  {\n    path: `${BASEPATH}facemesh`,\n    component: FaceMesh,\n    name: 'Face Mesh',\n  },\n\n  {\n    path: `${BASEPATH}hand-pose`,\n    component: HandPose,\n    name: 'Hand Mesh',\n  },\n\n  {\n    path: `${BASEPATH}audio-analysis`,\n    component: Audio,\n    name: 'Audio analysis',\n  },\n]\n\nexport default Routes\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Flex } from 'theme-ui'\nimport Routes from './routes'\nimport { Nav } from './components'\n\nconst App = () => (\n  <Router>\n    <Flex>\n      <Nav />\n      <Switch>\n        {Routes.map(({ exact, path, component: Component }, index) => (\n          <Route exact={exact} key={index} path={path}>\n            <Component />\n          </Route>\n        ))}\n      </Switch>\n    </Flex>\n  </Router>\n)\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Theme } from 'theme-ui'\n\nconst defaultButton = {\n  outline: 'none',\n}\n\nconst theme: Theme = {\n  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n  fonts: {\n    body:\n      '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n    heading: 'inherit',\n    monospace: 'Menlo, monospace',\n  },\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 96],\n  fontWeights: {\n    body: 400,\n    heading: 700,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.5,\n  },\n  sizes: {\n    container: '100%',\n  },\n  layout: {\n    section: {\n      p: 4,\n      width: '100%',\n    },\n  },\n  buttons: {\n    primary: {\n      ...defaultButton,\n      cursor: 'pointer',\n      bg: 'green',\n      color: 'secondary',\n      transition: 'all .1s ease-out',\n      '&:hover': {\n        bg: 'secondary',\n        color: 'green',\n      },\n    },\n    secondary: {\n      ...defaultButton,\n      bg: 'secondary',\n      color: 'white',\n      cursor: 'pointer',\n    },\n  },\n  colors: {\n    text: '#FFF',\n    background: '#333',\n    primary: '#FFF',\n    gray: '#f0f0f0',\n    secondary: '#333',\n    green: 'rgb(99, 255, 203)',\n    muted: '#999',\n    code: '#444',\n  },\n  links: {\n    text: {\n      color: 'green',\n      '&:hover': {\n        textDecoration: 'none',\n      },\n    },\n    nav: {\n      fontSize: 0,\n      mr: 4,\n      my: 2,\n      color: 'primary',\n      transition: 'all 0.15s ease-out',\n      '&:active': {\n        color: 'green',\n      },\n      '&:focus': {\n        color: 'green',\n      },\n      '&:hover': {\n        opacity: 0.5,\n      },\n    },\n  },\n  text: {\n    heading: {\n      mb: 3,\n    },\n    default: {\n      mb: 3,\n    },\n  },\n  styles: {\n    root: {\n      fontFamily: 'body',\n      lineHeight: 'body',\n      fontWeight: 'body',\n      letterSpacing: '0.6px',\n      bg: 'black',\n    },\n    h1: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 5,\n    },\n    h2: {\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 4,\n    },\n    h3: {\n      color: 'muted',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 3,\n      variant: 'text.heading',\n    },\n    h4: {\n      color: 'muted',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'body',\n      fontSize: 2,\n      variant: 'text.heading',\n    },\n    h5: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 1,\n    },\n    h6: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 0,\n    },\n    p: {\n      color: 'text',\n      fontFamily: 'body',\n      fontWeight: 'body',\n      lineHeight: 'body',\n    },\n    a: {\n      color: 'primary',\n    },\n    pre: {\n      my: 3,\n      p: 3,\n      fontFamily: 'monospace',\n      overflowX: 'auto',\n      code: {\n        color: 'code',\n      },\n      maxWidth: '700px',\n      borderRadius: '7px',\n      bg: 'gray',\n      color: 'black',\n    },\n    // @ts-ignore\n    spinner: {\n      size: 20,\n      mr: 2,\n    },\n    code: {\n      fontFamily: 'monospace',\n      fontSize: 'inherit',\n    },\n    table: {\n      width: '100%',\n      borderCollapse: 'separate',\n      borderSpacing: 0,\n    },\n    th: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid',\n    },\n    td: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid',\n    },\n    img: {\n      maxWidth: '100%',\n    },\n    hr: {\n      my: 4,\n      bg: 'muted',\n      opacity: 0.3,\n      height: '1px',\n    },\n  },\n}\n\nexport default theme\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from 'theme-ui'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport theme from './theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}