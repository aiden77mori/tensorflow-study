{"version":3,"sources":["pages/TransferLearning.tsx","pages/FaceMesh.tsx","pages/HandPose.tsx","pages/Home.tsx","components/Link/Link.tsx","components/Nav/Nav.tsx","components/Loading/Loading.tsx","components/Error/Error.tsx","pages/Webcam.tsx","pages/ImageDetection.tsx","hooks/useUserMedia.ts","common/index.js","pages/SentimentAnalysis.tsx","routes/index.ts","App.tsx","reportWebVitals.ts","theme/index.ts","index.tsx"],"names":["raf","model","camera","renderer","points","stats","Home","as","variant","href","target","CustomLink","ThemeUILink","Link","children","props","RouterLink","Nav","location","useLocation","console","log","pathname","sx","flexDirection","px","py","background","minHeight","minWidth","width","Routes","map","r","path","color","pointerEvents","to","name","Loading","text","alignItems","Error","Webcam","videoRef","useRef","useState","modelMobilenet","setModelMobilenet","loading","setLoading","error","setError","result","setResult","classify","useCallback","img","a","undefined","output","outputList","o","index","className","Math","round","probability","dispose","load","onCapture","current","data","webcam","capture","loadModels","mobilenet","loadCam","video","useEffect","mb","style","transform","height","ref","onClick","mt","ImageDetection","key","setKey","onLoad","alt","crossOrigin","src","maxHeight","opacity","POSES","sort","b","localeCompare","TransferLearning","modelKnn","setModelKnn","setWebcam","takingPictures","setTakingPictures","takenPoses","setTakenPoses","allPoses","setAllPoses","addExample","classId","i","activation","infer","nextFrame","poses","toString","loopDetection","getNumClasses","predictClass","fontWeight","label","Object","keys","confidences","window","requestAnimationFrame","knn","cancelAnimationFrame","maxWidth","justifyContent","useUserMedia","media","setMedia","navigator","mediaDevices","getUserMedia","getMedia","PALLETE","scene","Scene","geometry","BufferGeometry","positions","Color","colors","propsStatsContainer","position","bottom","right","FaceMesh","canvasRef","statsRef","facingMode","loopPredictions","estimateFaces","returnTensors","flipHorizontal","input","predictions","forEach","p","annotations","setHex","length","push","g","setAttribute","Float32BufferAttribute","computeBoundingSphere","attributes","needsUpdate","render","update","loadModel","faceLandmarksDetection","mediapipeFacemesh","srcObject","onloadedmetadata","play","PerspectiveCamera","z","texture","TextureLoader","WebGLRenderer","canvas","alpha","setSize","material","PointsMaterial","size","vertexColors","Points","add","Stats","appendChild","dom","end","autoPlay","top","left","SentimentAnalysis","setModel","modelToxicity","setModelToxicity","metadata","setMetadata","loadingScore","setLoadingScore","score","setScore","scoreToxicity","setScoreToxicity","state","setState","loadToxicity","loadLayersModel","fetch","json","onAnalyse","e","preventDefault","trimmed","trim","toLowerCase","replace","split","sequence","word","wordIndex","word_index","index_from","finalSequence","Array","max_len","fill","concat","inputTensor","tensor2d","prediction","predict","dataSync","onSubmit","maxLength","autoComplete","onChange","evt","currentTarget","value","fontSize","s","pl","results","every","match","JSON","stringify","probabilities","propsGui","offsetX","offsetY","palette","component","exact","stream","estimateHands","handpose","gui","dat","destroy","App","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultButton","outline","theme","space","fonts","body","heading","monospace","fontSizes","fontWeights","bold","lineHeights","sizes","container","layout","section","buttons","primary","cursor","bg","transition","secondary","green","muted","links","nav","mr","my","default","styles","root","fontFamily","lineHeight","letterSpacing","h1","h2","h3","h4","h5","h6","pre","overflowX","code","spinner","table","borderCollapse","borderSpacing","th","textAlign","borderBottomStyle","td","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e412705d.chunk.js","sourcesContent":["import { data, nextFrame } from '@tensorflow/tfjs'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Box, Button, Flex, Container, Heading } from 'theme-ui'\nimport * as knn from '@tensorflow-models/knn-classifier'\nimport * as mobilenet from '@tensorflow-models/mobilenet'\nimport { Error, Loading } from '../components'\n\nconst CAMERA_SCALE = 1.2\nconst POSES = ['left', 'up', 'down', 'center', 'right'].sort((a, b) => a.localeCompare(b))\nlet raf: number | undefined\n\nconst TransferLearning = () => {\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const [modelMobilenet, setModelMobilenet] = useState<mobilenet.MobileNet>()\n  const [modelKnn, setModelKnn] = useState<knn.KNNClassifier>()\n  const [webcam, setWebcam] = useState<any>()\n  const [result, setResult] = useState<JSX.Element>()\n  const [takingPictures, setTakingPictures] = useState<boolean>(false)\n  const [takenPoses, setTakenPoses] = useState<any[]>([])\n  const [allPoses, setAllPoses] = useState<boolean>(false)\n  const [error, setError] = useState<boolean>(false)\n\n  const stopLoopDetection = () => {\n    if (raf) window.cancelAnimationFrame(raf)\n    raf = undefined\n  }\n\n  const addExample = async (classId: number | string) => {\n    setTakingPictures(true)\n    let i = 0\n\n    while (i < 15) {\n      const img = await webcam.capture()\n      const activation = modelMobilenet?.infer(img)\n\n      if (activation) modelKnn?.addExample(activation, classId)\n\n      img.dispose()\n      i++\n      await nextFrame()\n    }\n\n    const poses = [...takenPoses, classId].sort((a, b) => a.localeCompare(b))\n    setTakenPoses(poses)\n    setTakingPictures(false)\n\n    if (poses.toString() === POSES.toString()) {\n      setAllPoses(true)\n    }\n  }\n\n  const loopDetection = async () => {\n    if (!modelKnn) return\n    if (modelKnn.getNumClasses() > 0) {\n      const img = await webcam.capture()\n      const activation = modelMobilenet?.infer(img)\n      const result = await modelKnn?.predictClass(activation!)\n\n      setResult(\n        <Box>\n          <Box mb={2} sx={{ fontWeight: 'bold' }}>\n            {result.label}\n          </Box>\n          {Object.keys(result.confidences).map((a, index) => (\n            <Box key={index}>\n              {a}: {result.confidences[a]}\n            </Box>\n          ))}\n        </Box>\n      )\n\n      img.dispose()\n    }\n\n    raf = window.requestAnimationFrame(loopDetection)\n  }\n\n  const startLoopDetection = () => {\n    loopDetection()\n  }\n\n  const loadModels = async (video: HTMLVideoElement) => {\n    try {\n      setModelMobilenet(await mobilenet.load())\n      setModelKnn(await knn.create())\n      setWebcam(await data.webcam(video))\n    } catch (e) {\n      console.log(e)\n      setError(true)\n    }\n  }\n\n  useEffect(() => {\n    if (videoRef.current) loadModels(videoRef.current)\n\n    return () => {\n      stopLoopDetection()\n    }\n  }, [videoRef])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Transfer Learning</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Teach the machine all five head positions to start the position analysis.\n      </Heading>\n      {error ? (\n        <Error />\n      ) : (\n        <>\n          {(!modelKnn || !modelMobilenet) && (\n            <Loading text=\"Loading Mobilenet and KNN Tensorflow Models\" />\n          )}\n          <Box sx={{ maxWidth: 640 * CAMERA_SCALE }}>\n            <Box>\n              <video\n                style={{\n                  transform: 'scaleX(-1)',\n                }}\n                width={640 * CAMERA_SCALE}\n                height={480 * CAMERA_SCALE}\n                ref={videoRef}\n              />\n            </Box>\n            {modelKnn && modelMobilenet && (\n              <>\n                <Box\n                  mt={3}\n                  sx={{\n                    opacity: takingPictures ? 0.5 : 1,\n                    pointerEvents: takingPictures ? 'none' : 'visible',\n                  }}\n                >\n                  {!allPoses && (\n                    <Box>\n                      <Flex sx={{ mt: 3, justifyContent: 'space-between' }}>\n                        <Button onClick={() => addExample('left')} variant=\"secondary\">\n                          Left\n                        </Button>\n                        <Button onClick={() => addExample('up')} variant=\"secondary\">\n                          Up\n                        </Button>\n                        <Button onClick={() => addExample('center')} variant=\"secondary\">\n                          Center\n                        </Button>\n                        <Button onClick={() => addExample('down')} variant=\"secondary\">\n                          Down\n                        </Button>\n                        <Button onClick={() => addExample('right')} variant=\"secondary\">\n                          Right\n                        </Button>\n                      </Flex>\n                    </Box>\n                  )}\n                  {allPoses && (\n                    <Button variant=\"primary\" onClick={startLoopDetection} mt={2}>\n                      Detect head position\n                    </Button>\n                  )}\n                </Box>\n                <Box mt={3}>{result}</Box>\n              </>\n            )}\n          </Box>\n        </>\n      )}\n    </Container>\n  )\n}\n\nexport default TransferLearning\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Box, Container, Heading } from 'theme-ui'\nimport * as faceLandmarksDetection from '@tensorflow-models/face-landmarks-detection'\n\nimport Stats from 'three/examples/jsm/libs/stats.module'\nimport {\n  Scene,\n  PerspectiveCamera,\n  BufferGeometry,\n  Float32BufferAttribute,\n  WebGLRenderer,\n  PointsMaterial,\n  Points,\n  Color,\n  TextureLoader,\n} from 'three'\n\nimport { Error, Loading } from '../components'\nimport useUserMedia from '../hooks/useUserMedia'\nimport { PALLETE } from '../common'\n\nlet raf = 0\n\nconst CAMERA_SCALE = 1.25\nconst WIDTH = 640 * CAMERA_SCALE\nconst HEIGHT = 360 * CAMERA_SCALE\n\nlet model: faceLandmarksDetection.FaceLandmarksPackage\n\nconst scene = new Scene()\nlet camera: PerspectiveCamera\nlet renderer: WebGLRenderer\nconst geometry = new BufferGeometry()\nlet positions: number[] = []\nconst color: Color = new Color()\nlet colors: number[] = []\nlet points: Points\nlet stats: Stats\n\nconst propsStatsContainer = {\n  position: 'absolute',\n  bottom: 0,\n  right: 0,\n  '& > div': {\n    position: 'static !important',\n  },\n}\n\nconst FaceMesh = () => {\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const statsRef = useRef<HTMLDivElement>(null)\n  const [error, setError] = useState<boolean>(false)\n  const [loading, setLoading] = useState<boolean>(false)\n  const [media] = useUserMedia({\n    video: {\n      facingMode: 'user',\n      width: WIDTH,\n      height: HEIGHT,\n    },\n  })\n\n  const loopPredictions = useCallback(async () => {\n    try {\n      if (!model || !videoRef.current || !canvasRef.current) {\n        raf = requestAnimationFrame(loopPredictions)\n        return\n      }\n\n      const predictions = await model.estimateFaces({\n        returnTensors: false,\n        flipHorizontal: false,\n        input: videoRef.current,\n      })\n\n      positions = []\n      colors = []\n      const { width, height } = canvasRef.current!\n      predictions?.forEach(p => {\n        //@ts-ignore\n        const { annotations } = p\n\n        Object.keys(annotations).forEach((a, index) => {\n          color.setHex(PALLETE[index % (PALLETE.length - 1)])\n          annotations[a].forEach((i: number[]) => {\n            positions.push(i[0] - width / 2, height / 2 - i[1], -i[2])\n            colors.push(color.r, color.g, color.b)\n          })\n        })\n      })\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positions, 3))\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3))\n      geometry.computeBoundingSphere()\n      points.geometry.attributes.position.needsUpdate = true\n\n      renderer.render(scene, camera)\n      stats.update()\n    } catch (e) {\n      console.log(e)\n    }\n\n    raf = requestAnimationFrame(loopPredictions)\n  }, [])\n\n  const loadModel = useCallback(async () => {\n    try {\n      setLoading(true)\n      model = await faceLandmarksDetection.load(\n        faceLandmarksDetection.SupportedPackages.mediapipeFacemesh\n      )\n\n      setLoading(false)\n      loopPredictions()\n    } catch (e) {\n      setLoading(false)\n      setError(true)\n    }\n  }, [loopPredictions])\n\n  useEffect(() => {\n    if (!videoRef.current || !canvasRef.current) return\n    videoRef.current.srcObject = media\n    videoRef.current.onloadedmetadata = () => {\n      videoRef.current!.play()\n\n      const { width, height } = canvasRef.current!\n\n      camera = new PerspectiveCamera(60, width / height, 0.1, 1000)\n      camera.position.z = width / 2\n\n      const texture = new TextureLoader().load(\n        'https://raw.githubusercontent.com/mrdoob/three.js/master/examples/textures/sprites/disc.png'\n      )\n      //\n\n      renderer = new WebGLRenderer({\n        canvas: canvasRef.current!,\n        alpha: true,\n      })\n\n      renderer.setSize(width, height)\n\n      const material = new PointsMaterial({ size: 10, vertexColors: true, map: texture })\n\n      points = new Points(geometry, material)\n      scene.add(points)\n\n      if (!stats) {\n        stats = Stats()\n        statsRef.current?.appendChild(stats.dom)\n      }\n\n      loadModel()\n    }\n\n    return () => {\n      cancelAnimationFrame(raf)\n      stats.end()\n    }\n  }, [media, loadModel, videoRef, canvasRef, statsRef])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Face Mesh</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Create the face mesh of the detected face on the camera feed. <br />\n        Each color group represents one feature of the face being mapped, which means we can get the\n        positons individually.\n      </Heading>\n      {error ? (\n        <Error />\n      ) : (\n        <>\n          {loading && <Loading text=\"Loading Face Landmarks Model\" />}\n          <Box sx={{ position: 'relative' }}>\n            <video style={{ opacity: 0.4 }} autoPlay ref={videoRef} width={WIDTH} height={HEIGHT} />\n            <canvas\n              ref={canvasRef}\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n              }}\n              width={WIDTH}\n              height={HEIGHT}\n            />\n          </Box>\n        </>\n      )}\n      <Box\n        //@ts-ignore\n        sx={propsStatsContainer}\n        ref={statsRef}\n      />\n    </Container>\n  )\n}\n\nexport default FaceMesh\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Box, Container, Heading } from 'theme-ui'\nimport * as handpose from '@tensorflow-models/handpose'\nimport Stats from 'three/examples/jsm/libs/stats.module'\nimport {\n  Scene,\n  PerspectiveCamera,\n  BufferGeometry,\n  Float32BufferAttribute,\n  WebGLRenderer,\n  PointsMaterial,\n  Points,\n  Color,\n  TextureLoader,\n} from 'three'\n\nimport * as dat from 'dat.gui'\n\nimport { Error, Loading } from '../components'\nimport useUserMedia from '../hooks/useUserMedia'\n\nconst CAMERA_SCALE = 1.25\nlet model: handpose.HandPose | undefined = undefined\nlet raf = 0\n\nconst scene = new Scene()\nlet camera: PerspectiveCamera\nlet renderer: WebGLRenderer\nconst geometry = new BufferGeometry()\nlet positions: number[] = []\nconst color: Color = new Color()\nlet colors: number[] = []\nlet points: Points\nlet stats: Stats\n\nconst propsStatsContainer = {\n  position: 'absolute',\n  bottom: 0,\n  right: 0,\n  '& > div': {\n    position: 'static !important',\n  },\n}\n\nconst propsGui = {\n  offsetX: -215,\n  offsetY: 137,\n}\n\nconst palette = [0xedae49, 0xd1495b, 0x00798c, 0x30638e, 0x003d5b, 0x4b3f72, 0xe9190f]\n\nconst HandPose = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const statsRef = useRef<HTMLDivElement>(null)\n  const [loading, setLoading] = useState(true)\n  const [stream] = useUserMedia({ video: true })\n  const [error, setError] = useState<boolean>(false)\n\n  const estimateHands = useCallback(async () => {\n    try {\n      const predictions = videoRef.current && (await model?.estimateHands(videoRef.current))\n\n      if (canvasRef.current) {\n        positions = []\n        colors = []\n        const { width, height } = canvasRef.current\n        predictions?.forEach(p => {\n          Object.keys(p.annotations).forEach((a, index) => {\n            color.setHex(palette[index % (palette.length - 1)])\n            p.annotations[a].forEach(i => {\n              positions.push(\n                i[0] - width / 2 + propsGui.offsetX,\n                height / 2 - i[1] + propsGui.offsetY,\n                -i[2]\n              )\n              colors.push(color.r, color.g, color.b)\n            })\n          })\n        })\n\n        geometry.setAttribute('position', new Float32BufferAttribute(positions, 3))\n        geometry.setAttribute('color', new Float32BufferAttribute(colors, 3))\n        geometry.computeBoundingSphere()\n        points.geometry.attributes.position.needsUpdate = true\n      }\n\n      renderer.render(scene, camera)\n      stats.update()\n      raf = requestAnimationFrame(estimateHands)\n    } catch (e) {\n      console.log(e)\n    }\n  }, [])\n\n  const loadModel = useCallback(async () => {\n    try {\n      setLoading(true)\n      model = await handpose.load()\n      setLoading(false)\n      estimateHands()\n    } catch (e) {\n      setError(true)\n      console.log(e)\n    }\n  }, [setLoading, estimateHands])\n\n  useEffect(() => {\n    if (!videoRef.current || !canvasRef.current) return\n    videoRef.current.srcObject = stream\n    videoRef.current.onloadedmetadata = () => {\n      videoRef.current!.play()\n      loadModel()\n    }\n\n    const { width, height } = canvasRef.current\n\n    camera = new PerspectiveCamera(90, width / height, 0.1, 1000)\n    camera.position.z = width / 2\n\n    const texture = new TextureLoader().load(\n      'https://raw.githubusercontent.com/mrdoob/three.js/master/examples/textures/sprites/disc.png'\n    )\n    //\n\n    renderer = new WebGLRenderer({\n      canvas: canvasRef.current,\n      alpha: true,\n    })\n\n    renderer.setSize(width, height)\n\n    const material = new PointsMaterial({ size: 20, vertexColors: true, map: texture })\n\n    points = new Points(geometry, material)\n    scene.add(points)\n\n    if (!stats) {\n      stats = Stats()\n      statsRef.current?.appendChild(stats.dom)\n    }\n\n    const gui = new dat.GUI()\n    gui.add(propsGui, 'offsetX', -300, 300, 1)\n    gui.add(propsGui, 'offsetY', -300, 300, 1)\n\n    return () => {\n      gui.destroy()\n      cancelAnimationFrame(raf)\n      raf = 0\n      stats.end()\n    }\n  }, [canvasRef, videoRef, stream, loadModel])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Hand Mesh</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Put your hand where the camera can see and start tracking and tracing your hand mesh.\n        <br />\n        Each color group represents one feature of the hand being mapped, which means we can get the\n        positons individually.\n      </Heading>\n      {error ? (\n        <Error />\n      ) : (\n        <>\n          {loading && <Loading text=\"Loading Hand Pose Model\" />}\n          <Box sx={{ position: 'relative' }}>\n            <video\n              style={{ opacity: 0.4, transform: 'scaleX(-1)' }}\n              ref={videoRef}\n              width={640 * CAMERA_SCALE}\n              height={360 * CAMERA_SCALE}\n            />\n            <canvas\n              style={{ transform: 'scaleX(-1)', position: 'absolute', top: 0, left: 0 }}\n              ref={canvasRef}\n              width={640 * CAMERA_SCALE}\n              height={360 * CAMERA_SCALE}\n            />\n          </Box>\n        </>\n      )}\n      <Box\n        //@ts-ignore\n        sx={propsStatsContainer}\n        ref={statsRef}\n      />\n    </Container>\n  )\n}\n\nexport default HandPose\n","import React from 'react'\nimport { Container, Text, Heading, Link } from 'theme-ui'\n\nconst Home = () => {\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Hello World</Heading>\n      <Text>\n        This is a series of Machine Learning experiments using TensorFlow.js, React and Theme-ui by{' '}\n        <Link variant=\"text\" href=\"https://s2paganini.com\" target=\"_blank\">\n          Silvio Paganini\n        </Link>\n        .\n      </Text>\n      <Text>Choose the experiments on the left menu to start.</Text>\n    </Container>\n  )\n}\n\nexport default Home\n","import React, { RefAttributes, PropsWithoutRef, ForwardRefExoticComponent } from 'react'\nimport { Link as RouterLink, LinkProps as RouterLinkProps } from 'react-router-dom'\nimport { NavLink as ThemeUILink, NavLinkProps as ThemedUILinkProps } from 'theme-ui'\n\n/**\n * @see https://www.reactjunkie.com/theme-ui-react-router-link-typescript\n */\n\ntype ForwardRef<T, P> = ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>\n\nexport type CustomLinkCombinedProps = ThemedUILinkProps & RouterLinkProps<{}>\nexport const CustomLink: ForwardRef<HTMLAnchorElement, CustomLinkCombinedProps> = ThemeUILink\n\nconst Link = ({ children, ...props }: CustomLinkCombinedProps) => {\n  return (\n    <CustomLink as={RouterLink} {...props}>\n      {children}\n    </CustomLink>\n  )\n}\n\nexport default Link\n","import { useLocation } from 'react-router-dom'\nimport { Flex } from 'theme-ui'\nimport { Link } from '..'\nimport Routes from '../../routes'\n\nconst Nav = () => {\n  const location = useLocation()\n\n  console.log(location.pathname)\n\n  return (\n    <Flex\n      as=\"nav\"\n      sx={{\n        flexDirection: 'column',\n        px: 3,\n        py: 4,\n        background: 'linear-gradient(180deg, #111 0%, #222 100%)',\n        minHeight: '100vh',\n        minWidth: '230px',\n        width: '230px',\n      }}\n    >\n      {Routes.map(r => {\n        console.log(location.pathname, r.path, location.pathname === r.path)\n        return (\n          <Link\n            key={r.name}\n            variant=\"links.nav\"\n            sx={{\n              color: location.pathname === r.path ? 'green' : 'primary',\n              pointerEvents: location.pathname === r.path ? 'none' : 'visible',\n            }}\n            to={r.path}\n          >\n            {r.name}\n          </Link>\n        )\n      })}\n    </Flex>\n  )\n}\n\nexport default Nav\n","import React from 'react'\nimport { Flex, Spinner, Label } from 'theme-ui'\n\ntype LoadingProps = {\n  text?: string\n}\n\nconst Loading = ({ text = 'Loading' }: LoadingProps) => (\n  <Flex>\n    <Flex sx={{ alignItems: 'center', py: 2 }}>\n      <Spinner variant=\"styles.spinner\" />\n      <Label>{text}</Label>\n    </Flex>\n  </Flex>\n)\n\nexport default Loading\n","import React from 'react'\nimport { Flex, Text, Box } from 'theme-ui'\n\ntype ErrorProps = {\n  text?: string\n}\n\nconst Error = ({ text = 'Some error has occurred, please refresh your page' }: ErrorProps) => (\n  <Box>\n    <Flex sx={{ alignItems: 'center', py: 2 }}>\n      <Text>{text}</Text>\n    </Flex>\n  </Box>\n)\n\nexport default Error\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { data, Tensor3D } from '@tensorflow/tfjs'\nimport * as mobilenet from '@tensorflow-models/mobilenet'\nimport { Box, Button, Heading, Container } from 'theme-ui'\nimport { Error, Loading } from '../components'\n\nconst CAMERA_SCALE = 1.2\n\nconst Webcam = () => {\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const [modelMobilenet, setModelMobilenet] = useState<mobilenet.MobileNet>()\n  const [loading, setLoading] = useState<boolean>(false)\n  const [error, setError] = useState<boolean>(false)\n  const [result, setResult] = useState<JSX.Element[]>()\n\n  const classify = useCallback(\n    (img: Tensor3D) => {\n      const load = async (img: Tensor3D) => {\n        if (!modelMobilenet) {\n          setResult(undefined)\n          return\n        }\n\n        try {\n          setLoading(true)\n          const output = await modelMobilenet.classify(img)\n          const outputList = output.map((o, index) => (\n            <Box key={index}>\n              <b>{o.className}</b> - {`${Math.round(o.probability * 100)}%`}\n            </Box>\n          ))\n\n          setResult(outputList)\n          setLoading(false)\n\n          img.dispose()\n        } catch (e) {\n          setLoading(false)\n          setResult(undefined)\n          console.log(e)\n        }\n      }\n      load(img)\n    },\n    [modelMobilenet]\n  )\n\n  const onCapture = async () => {\n    if (!videoRef.current) return\n    try {\n      const webcam = await data.webcam(videoRef.current)\n      const img = await webcam.capture()\n      classify(img)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const loadModels = async () => {\n    try {\n      setModelMobilenet(await mobilenet.load())\n      const loadCam = async (video: HTMLVideoElement) => {\n        await data.webcam(video)\n      }\n      if (videoRef.current) loadCam(videoRef.current)\n      setLoading(false)\n    } catch (e) {\n      console.log(e)\n      setError(true)\n    }\n  }\n\n  useEffect(() => {\n    loadModels()\n  }, [videoRef])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Webcam object detection</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Hold an object in front of your camera and click on \"Capture\" to analyse the camera feed\n      </Heading>\n      {error ? (\n        <Error />\n      ) : modelMobilenet ? (\n        <>\n          <Box mb={4}>\n            <video\n              style={{\n                transform: 'scaleX(-1)',\n              }}\n              width={640 * CAMERA_SCALE}\n              height={480 * CAMERA_SCALE}\n              ref={videoRef}\n            ></video>\n          </Box>\n          <Button onClick={onCapture} variant=\"primary\">\n            Capture\n          </Button>\n          {loading && <Loading text=\"Analysing\" />}\n          {result && <Box mt={3}>{result}</Box>}\n        </>\n      ) : (\n        <Loading text=\"Loading Mobilenet Tensorflow Models\" />\n      )}\n    </Container>\n  )\n}\n\nexport default Webcam\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Box, Image, Button, Heading, Container } from 'theme-ui'\nimport * as mobilenet from '@tensorflow-models/mobilenet'\nimport { Loading, Error } from '../components'\n\nconst ImageDetection = () => {\n  const ref = useRef<HTMLImageElement>(null)\n  const [loading, setLoading] = useState<boolean>(false)\n  const [modelMobilenet, setModelMobilenet] = useState<mobilenet.MobileNet>()\n  const [error, setError] = useState<boolean>(false)\n  const [key, setKey] = useState<number>(0)\n  const [result, setResult] = useState<JSX.Element[]>()\n\n  const classify = useCallback(\n    (img: HTMLImageElement) => {\n      const load = async (img: HTMLImageElement) => {\n        if (!modelMobilenet) {\n          setLoading(false)\n          setResult(undefined)\n          return\n        }\n\n        try {\n          setLoading(true)\n          const output = await modelMobilenet.classify(img)\n          const outputList = output.map((o, index) => (\n            <Box key={index}>\n              <b>{o.className}</b> - {`${Math.round(o.probability * 100)}%`}\n            </Box>\n          ))\n\n          setResult(outputList)\n          setLoading(false)\n        } catch (e) {\n          setLoading(false)\n          setResult(undefined)\n          console.log(e)\n        }\n      }\n      load(img)\n    },\n    [modelMobilenet]\n  )\n\n  const onLoadImage = () => {\n    if (ref.current) classify(ref.current)\n  }\n\n  const loadModels = async () => {\n    try {\n      setModelMobilenet(await mobilenet.load())\n      setLoading(false)\n    } catch (e) {\n      console.log(e)\n      setError(true)\n    }\n  }\n\n  useEffect(() => {\n    loadModels()\n  }, [])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Random Image Detection</Heading>\n      {error ? (\n        <Error />\n      ) : modelMobilenet ? (\n        <Container>\n          <Image\n            onLoad={onLoadImage}\n            key={key}\n            ref={ref}\n            alt=\"cat\"\n            crossOrigin=\"anonymous\"\n            src=\"https://picsum.photos/1000/700\"\n            sx={{ maxHeight: 700, width: '100%' }}\n          />\n          {result && <Box mt={3}>{result}</Box>}\n          <Button\n            mt={3}\n            variant=\"primary\"\n            sx={{ pointerEvents: loading ? 'none' : 'visible', opacity: loading ? 0.5 : 1 }}\n            onClick={() => {\n              setLoading(true)\n              setResult(undefined)\n              setKey(key + 1)\n            }}\n          >\n            {loading ? 'Loading...' : 'Try a new image'}\n          </Button>\n        </Container>\n      ) : (\n        <Loading text=\"Loading Mobilenet Tensorflow Models\" />\n      )}\n    </Container>\n  )\n}\n\nexport default ImageDetection\n","import { useEffect, useState } from 'react'\n\nconst useUserMedia = (props: MediaStreamConstraints) => {\n  const [media, setMedia] = useState<MediaStream>()\n  const [error, setError] = useState<any>()\n\n  useEffect(() => {\n    if (media) return\n    const getMedia = async () => {\n      try {\n        setMedia(await navigator.mediaDevices.getUserMedia(props))\n      } catch (e) {\n        setError(e)\n      }\n    }\n\n    getMedia()\n  }, [props, media])\n\n  return [media, error]\n}\n\nexport default useUserMedia\n","export const PALLETE = [\n  0xedae49,\n  0xd1495b,\n  0x00798c,\n  0x30638e,\n  0x003d5b,\n  0x4b3f72,\n  0xe9190f,\n  0xf75c03,\n  0xf1c40f,\n  0xfe5f55,\n]\n","import { LayersModel, loadLayersModel, tensor2d } from '@tensorflow/tfjs'\nimport React, { ChangeEvent, FormEvent, useEffect, useState } from 'react'\nimport { Container, Box, Button, Heading, Input, Text } from 'theme-ui'\nimport { ToxicityClassifier, load as loadToxicity } from '@tensorflow-models/toxicity'\nimport { Loading, Error } from '../components'\n\nconst MODEL_URL = 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json'\nconst METADATA_URL =\n  'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json'\n\nconst SentimentAnalysis = () => {\n  const [model, setModel] = useState<LayersModel>()\n  const [modelToxicity, setModelToxicity] = useState<ToxicityClassifier>()\n  const [metadata, setMetadata] = useState<any>()\n  const [loading, setLoading] = useState<boolean>(false)\n  const [loadingScore, setLoadingScore] = useState<boolean>(false)\n  const [score, setScore] = useState<number>()\n  const [scoreToxicity, setScoreToxicity] = useState<any[]>()\n  const [state, setState] = useState<string>(\n    'This is really the most useless talk I have ever watched'\n  )\n  const [error, setError] = useState<boolean>(false)\n\n  const loadModel = async () => {\n    try {\n      setLoading(true)\n      setModelToxicity(await loadToxicity(0.9, []))\n      setModel(await loadLayersModel(MODEL_URL))\n      setMetadata(await (await fetch(METADATA_URL)).json())\n      setLoading(false)\n    } catch (e) {\n      setError(true)\n    }\n  }\n\n  const onChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    setState(evt.currentTarget.value)\n  }\n\n  const onAnalyse = async (e: FormEvent | MouseEvent) => {\n    e.preventDefault()\n    if (!metadata || !model) return\n\n    setLoadingScore(true)\n    setScore(undefined)\n    setScoreToxicity(undefined)\n\n    const trimmed = state\n      .trim()\n      .toLowerCase()\n      .replace(/(\\.|,|!\\?)/g, '')\n      .split(' ')\n\n    const sequence = trimmed.map(word => {\n      const wordIndex = metadata.word_index[word]\n      if (typeof wordIndex === 'undefined') {\n        return 2\n      }\n      return wordIndex + metadata.index_from\n    })\n\n    const finalSequence = new Array(metadata.max_len - sequence.length).fill(0).concat(sequence)\n\n    const inputTensor = tensor2d(finalSequence, [1, metadata.max_len])\n    const prediction = model.predict(inputTensor)\n    //@ts-ignore\n    setScore(prediction.dataSync()[0])\n    //@ts-ignore\n    prediction.dispose()\n\n    setScoreToxicity(await modelToxicity?.classify([state]))\n    setLoadingScore(false)\n  }\n\n  useEffect(() => {\n    loadModel()\n  }, [])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Sentiment analysis</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Analyse text sentiment and toxicity.\n      </Heading>\n      {error ? (\n        <Error />\n      ) : (\n        <>\n          {loading && <Loading text=\"Loading Sentiment and Toxicity models\" />}\n          {!loading && (\n            <>\n              <Box as=\"form\" sx={{ position: 'relative' }} onSubmit={onAnalyse}>\n                <Input\n                  maxLength={100}\n                  autoComplete=\"off\"\n                  mt={3}\n                  onChange={onChange}\n                  value={state}\n                  name=\"input\"\n                />\n                <Box sx={{ position: 'absolute', bottom: -25, right: '2px', fontSize: 0 }}>\n                  {state.length}/100\n                </Box>\n              </Box>\n              {score && scoreToxicity && (\n                <Box mt={2}>\n                  <Text>\n                    <Heading mt={4} as=\"h3\">\n                      Sentiment Score:\n                    </Heading>\n                    <Text\n                      as=\"span\"\n                      mt={3}\n                      sx={{\n                        color: score > 0.66 ? 'green' : score < 0.33 ? 'red' : 'orange',\n                      }}\n                    >\n                      {score}\n                    </Text>\n                  </Text>\n                  <Text mt={2}>\n                    <Heading mt={4} as=\"h3\">\n                      Toxicity:\n                    </Heading>\n                    {scoreToxicity?.map((s: any, index: number) => (\n                      <Box\n                        mt={2}\n                        pl={3}\n                        key={index}\n                        sx={{ opacity: s.results.every((a: any) => a.match) ? 1 : 0.4 }}\n                      >\n                        <b>{s.label}</b>:\n                        {s.results.map((r: any, i: number) => (\n                          <Box mt={2} key={i}>\n                            <Text sx={{ pl: 4 }}>\n                              Probabilities: {JSON.stringify(r.probabilities)}\n                            </Text>\n                            <Text sx={{ pl: 4 }}>\n                              Match:{' '}\n                              <Text\n                                as=\"span\"\n                                sx={{\n                                  color: r.match ? 'green' : 'text',\n                                  fontWeight: r.match ? 'bold' : 'normal',\n                                }}\n                              >\n                                {JSON.stringify(r.match)}\n                              </Text>\n                            </Text>\n                          </Box>\n                        ))}\n                      </Box>\n                    ))}\n                  </Text>\n                </Box>\n              )}\n              <Button\n                sx={{\n                  opacity: loadingScore ? 0.4 : 1,\n                  pointerEvents: loadingScore ? 'none' : 'visible',\n                }}\n                mt={4}\n                onClick={onAnalyse}\n              >\n                {!loadingScore ? 'Analyse' : 'Loading...'}\n              </Button>\n            </>\n          )}\n        </>\n      )}\n    </Container>\n  )\n}\n\nexport default SentimentAnalysis\n","import {\n  SentimentAnalysis,\n  FaceMesh,\n  Home,\n  ImageDetection,\n  TransferLearning,\n  Webcam,\n  // Audio,\n  HandPose,\n} from '../pages'\n\nconst Routes = [\n  {\n    path: '/tensorflow-study/',\n    component: Home,\n    name: 'Home',\n    exact: true,\n  },\n  {\n    path: '/tensorflow-study/image-detection',\n    component: ImageDetection,\n    name: 'Random Image Detection',\n  },\n  {\n    path: '/tensorflow-study/webcam',\n    component: Webcam,\n    name: 'Object Detection',\n  },\n  {\n    path: '/tensorflow-study/transfer-learning',\n    component: TransferLearning,\n    name: 'Transfer Learning',\n  },\n  {\n    path: '/tensorflow-study/sentiment',\n    component: SentimentAnalysis,\n    name: 'Sentiment Analysis',\n  },\n  {\n    path: '/tensorflow-study/facemesh',\n    component: FaceMesh,\n    name: 'Face Mesh',\n  },\n\n  {\n    path: '/tensorflow-study/hand-pose',\n    component: HandPose,\n    name: 'Hand Mesh',\n  },\n  // {\n  //   path: '/tensorflow-study/audio',\n  //   component: Audio,\n  //   name: 'Audio',\n  // },\n]\n\nexport default Routes\n","import '@tensorflow/tfjs'\nimport React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Flex } from 'theme-ui'\nimport Routes from './routes'\nimport { Nav } from './components'\n\nconst App = () => (\n  <Router>\n    <Flex>\n      <Nav />\n      <Switch>\n        {Routes.map(({ exact, path, component: Component }, index) => (\n          <Route exact={exact} key={index} path={path}>\n            <Component />\n          </Route>\n        ))}\n      </Switch>\n    </Flex>\n  </Router>\n)\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Theme } from 'theme-ui'\n\nconst defaultButton = {\n  outline: 'none',\n}\n\nconst theme: Theme = {\n  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n  fonts: {\n    body:\n      '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n    heading: 'inherit',\n    monospace: 'Menlo, monospace',\n  },\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 96],\n  fontWeights: {\n    body: 400,\n    heading: 700,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 2,\n  },\n  sizes: {\n    container: '100%',\n  },\n  layout: {\n    section: {\n      p: 4,\n      width: '100%',\n    },\n  },\n  buttons: {\n    primary: {\n      ...defaultButton,\n      cursor: 'pointer',\n      bg: 'green',\n      color: 'secondary',\n      transition: 'all .1s ease-out',\n      '&:hover': {\n        bg: 'secondary',\n        color: 'green',\n      },\n    },\n    secondary: {\n      ...defaultButton,\n      bg: 'secondary',\n      color: 'white',\n      cursor: 'pointer',\n    },\n  },\n  colors: {\n    text: '#FFF',\n    background: '#333',\n    primary: '#FFF',\n    secondary: '#333',\n    green: 'rgb(99, 255, 203)',\n    muted: '#999',\n  },\n  links: {\n    text: {\n      color: 'green',\n    },\n    nav: {\n      fontSize: 0,\n      mr: 4,\n      my: 2,\n      color: 'primary',\n      transition: 'all 0.15s ease-out',\n      '&:active': {\n        color: 'green',\n      },\n      '&:focus': {\n        color: 'green',\n      },\n      '&:hover': {\n        opacity: 0.5,\n      },\n    },\n  },\n  text: {\n    heading: {\n      mb: 3,\n    },\n    default: {\n      mb: 3,\n    },\n  },\n  styles: {\n    root: {\n      fontFamily: 'body',\n      lineHeight: 'body',\n      fontWeight: 'body',\n      letterSpacing: '0.6px',\n      bg: 'black',\n    },\n    h1: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 5,\n    },\n    h2: {\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 4,\n    },\n    h3: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 3,\n    },\n    h4: {\n      color: 'muted',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'body',\n      fontSize: 2,\n      variant: 'text.heading',\n    },\n    h5: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 1,\n    },\n    h6: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 0,\n    },\n    p: {\n      color: 'text',\n      fontFamily: 'body',\n      fontWeight: 'body',\n      lineHeight: 'body',\n    },\n    a: {\n      color: 'primary',\n    },\n    pre: {\n      fontFamily: 'monospace',\n      overflowX: 'auto',\n      code: {\n        color: 'inherit',\n      },\n    },\n    // @ts-ignore\n    spinner: {\n      size: 20,\n      mr: 2,\n    },\n    code: {\n      fontFamily: 'monospace',\n      fontSize: 'inherit',\n    },\n    table: {\n      width: '100%',\n      borderCollapse: 'separate',\n      borderSpacing: 0,\n    },\n    th: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid',\n    },\n    td: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid',\n    },\n    img: {\n      maxWidth: '100%',\n    },\n  },\n}\n\nexport default theme\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from 'theme-ui'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport theme from './theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}