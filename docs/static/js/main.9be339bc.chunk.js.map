{"version":3,"sources":["pages/TransferLearning.tsx","pages/FaceMesh.tsx","pages/HandPose.tsx","pages/RealTimeObjDetection.tsx","pages/Home.tsx","components/Link/Link.tsx","components/Nav/Nav.tsx","components/Loading/Loading.tsx","components/Error/Error.tsx","components/ModelReadyContainer/ModelReadyContainer.tsx","common/index.ts","hooks/useAnalyser.ts","hooks/useUserMedia.ts","pages/Webcam.tsx","pages/ImageDetection.tsx","pages/SentimentAnalysis.tsx","pages/Audio.tsx","routes/index.ts","App.tsx","reportWebVitals.ts","theme/index.ts","index.tsx"],"names":["raf","model","camera","renderer","points","stats","Home","as","variant","href","target","sx","color","mt","CustomLink","ThemeUILink","Link","children","props","RouterLink","Nav","location","useLocation","useState","show","setVisibility","zIndex","flexDirection","px","py","background","position","minHeight","minWidth","width","transition","left","Routes","map","r","onClick","pathname","path","pointerEvents","to","name","top","display","Loading","text","alignItems","Error","ModelReadyContainer","error","modelLoaded","loadingMessage","PALLETE","isMobile","window","innerWidth","useAnalyser","stream","fftSize","analyser","setAnalyser","useEffect","audioctx","AudioContext","source","createMediaStreamSource","a","createAnalyser","smoothingTimeConstant","connect","removeUserMedia","media","getTracks","forEach","m","stop","removeTrack","useUserMedia","setMedia","setError","navigator","mediaDevices","getUserMedia","addEventListener","console","log","getMedia","Webcam","videoRef","useRef","modelMobilenet","setModel","loading","setLoading","result","setResult","video","height","classify","useCallback","img","undefined","output","outputList","o","index","className","Math","round","probability","load","loadModels","mobilenet","setCamera","current","onloadedmetadata","play","srcObject","maxWidth","maxHeight","style","transform","innerHeight","ref","e","ImageDetection","setModelMobilenet","key","setKey","onLoad","alt","crossOrigin","src","opacity","POSES","sort","b","localeCompare","TransferLearning","modelKnn","setModelKnn","takingPictures","setTakingPictures","takenPoses","setTakenPoses","allPoses","setAllPoses","addExample","classId","i","activation","infer","nextFrame","poses","toString","loopDetection","getNumClasses","predictClass","mb","fontWeight","label","Object","keys","confidences","requestAnimationFrame","knn","cancelAnimationFrame","justifyContent","scene","Scene","geometry","BufferGeometry","positions","Color","colors","propsStatsContainer","bottom","right","FaceMesh","canvasRef","statsRef","facingMode","loopPredictions","estimateFaces","returnTensors","flipHorizontal","input","predictions","p","annotations","setHex","length","push","g","setAttribute","Float32BufferAttribute","computeBoundingSphere","attributes","needsUpdate","render","update","loadModel","faceLandmarksDetection","mediapipeFacemesh","PerspectiveCamera","z","texture","TextureLoader","WebGLRenderer","canvas","alpha","setSize","material","PointsMaterial","size","vertexColors","Points","add","Stats","appendChild","dom","end","SentimentAnalysis","modelToxicity","setModelToxicity","metadata","setMetadata","loadingScore","setLoadingScore","score","setScore","scoreToxicity","setScoreToxicity","state","setState","loadToxicity","loadLayersModel","fetch","json","onAnalyse","preventDefault","trimmed","trim","toLowerCase","replace","split","sequence","word","wordIndex","word_index","index_from","finalSequence","Array","max_len","fill","concat","inputTensor","tensor2d","prediction","predict","dataSync","dispose","onSubmit","maxLength","autoComplete","onChange","evt","currentTarget","value","fontSize","s","pl","results","every","match","JSON","stringify","probabilities","Audio","audio","getAudioData","ctx","getContext","freqData","Uint8Array","frequencyBinCount","getByteFrequencyData","imageData","getImageData","putImageData","colorValue","max","pow","fillStyle","beginPath","strokeStyle","moveTo","lineTo","stroke","drawCanvas","URL","origin","checkpointURL","metadataURL","recognizer","speechCommands","ensureModelLoaded","classLabels","wordLabels","listen","reduce","acc","_i","classPrediction","Number","scores","toFixed","includeSpectrogram","probabilityThreshold","invokeCallbackOnNoiseAndUnknown","overlapFactor","HandPose","estimateHands","handpose","WIDTH","HEIGHT","RealTimeObjDetection","analyseCamera","save","scale","drawImage","restore","detect","strokeRect","bbox","font","class","measureText","fillRect","fillText","cocoSsd","BASEPATH","require","homepage","component","exact","App","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultButton","outline","theme","space","fonts","body","heading","monospace","breakpoints","fontSizes","fontWeights","bold","lineHeights","sizes","container","layout","section","pt","buttons","menu","primary","cursor","bg","secondary","gray","green","muted","code","links","textDecoration","nav","mr","my","default","styles","root","fontFamily","lineHeight","letterSpacing","h1","h2","h3","h4","h5","h6","pre","overflowX","borderRadius","spinner","table","borderCollapse","borderSpacing","th","textAlign","borderBottomStyle","td","hr","ReactDOM","StrictMode","document","getElementById"],"mappings":"6kDAaIA,ECcAC,EAGAC,EACAC,EAKAC,EACAC,ECPAH,EACAC,EAKAC,EACAC,ECxBAJ,EACAI,E,8ECuEWC,EAlFF,WACX,OACE,eAAC,IAAD,CAAWC,GAAG,UAAUC,QAAQ,iBAAhC,UACE,cAAC,IAAD,CAASD,GAAG,KAAZ,yBACA,eAAC,IAAD,oEACyD,IACvD,cAAC,IAAD,CAAME,KAAK,gCAAgCC,OAAO,SAAlD,2BAFF,IAKI,IACF,cAAC,IAAD,CAAMD,KAAK,sBAAsBC,OAAO,SAAxC,sBANF,IASI,IACF,cAAC,IAAD,CAAMD,KAAK,sBAAsBC,OAAO,SAAxC,mBAEQ,IAZV,MAaM,IACJ,cAAC,IAAD,CAAMD,KAAK,uBAAuBC,OAAO,SAAzC,sBAEQ,IAhBV,KAiBK,IACH,cAAC,IAAD,CAAMF,QAAQ,OAAOC,KAAK,yBAAyBC,OAAO,SAA1D,6BAlBF,OAuBA,eAAC,IAAD,WACE,cAAC,IAAD,CAAMH,GAAG,OAAOI,GAAI,CAAEC,MAAO,SAA7B,oBAEQ,IAHV,6DAMA,cAAC,IAAD,IACA,cAAC,IAAD,CAASL,GAAG,KAAKC,QAAQ,YAAYG,GAAI,CAAEE,GAAI,GAA/C,mCAGA,eAAC,IAAD,WACE,cAAC,IAAD,CAAMN,GAAG,OAAOI,GAAI,CAAEC,MAAO,SAA7B,gBAEQ,IAHV,2BAI2B,IACzB,cAAC,IAAD,CAAKL,GAAG,MAAMC,QAAQ,aAAtB,SACE,uGAGJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAMD,GAAG,OAAOI,GAAI,CAAEC,MAAO,SAA7B,gBAEQ,IAHV,+BAKE,cAAC,IAAD,CAAKL,GAAG,MAAMC,QAAQ,aAAtB,SACE,kDAEE,uBAFF,uBAMJ,cAAC,IAAD,CAASD,GAAG,KAAKC,QAAQ,YAAYG,GAAI,CAAEE,GAAI,GAA/C,wBAGA,eAAC,IAAD,kFACsE,uBADtE,iBAEiB,IACf,cAAC,IAAD,CAAMJ,KAAK,qDAAqDC,OAAO,SAAvE,oBAHF,OAQA,cAAC,IAAD,CAASH,GAAG,KAAKC,QAAQ,YAAYG,GAAI,CAAEE,GAAI,GAA/C,+BAGA,eAAC,IAAD,6FAEE,uBAFF,sI,0DChEOC,EAAqEC,IAUnEC,EARF,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,SAAaC,EAAqC,4BAChE,OACE,cAACJ,EAAD,yBAAYP,GAAIY,KAAgBD,GAAhC,aACGD,MC+CQG,EAzDH,WACV,IAAMC,EAAWC,cADD,EAEcC,oBAAkB,GAFhC,mBAETC,EAFS,KAEHC,EAFG,KAIhB,OACE,qCACE,cAAC,IAAD,CACElB,GAAG,MACHI,GAAI,CACFe,OAAQ,IACRC,cAAe,SACfC,GAAI,EACJC,GAAI,CAAC,EAAG,EAAG,GACXC,WAAY,8CACZC,SAAU,CAAC,QAAS,QAAS,YAC7BC,UAAW,QACXC,SAAU,CAAC,QAAS,QAAS,SAC7BC,MAAO,QACPC,WAAY,qBACZC,KAAM,CAACZ,EAAO,EAAI,QAASA,EAAO,EAAI,QAAS,MAbnD,SAgBGa,GAAOC,KAAI,SAAAC,GACV,OACE,cAAC,EAAD,CAEE/B,QAAQ,YACRgC,QAAS,WACPf,GAAc,IAEhBd,GAAI,CACFC,MAAOS,EAASoB,WAAaF,EAAEG,KAAO,QAAU,UAChDC,cAAetB,EAASoB,WAAaF,EAAEG,KAAO,OAAS,WAEzDE,GAAIL,EAAEG,KAVR,SAYGH,EAAEM,MAXEN,EAAEM,WAgBf,cAAC,IAAD,CACEL,QAAS,WACPf,GAAeD,IAEjBb,GAAI,CACFe,OAAQ,IACRK,SAAU,QACVe,IAAK,EACLV,KAAM,EACNW,QAAS,CAAC,QAAS,QAAS,eCxCvBC,EATC,SAAC,GAAD,QAAGC,YAAH,MAAU,UAAV,SACd,cAAC,IAAD,UACE,eAAC,IAAD,CAAMtC,GAAI,CAAEuC,WAAY,SAAUrB,GAAI,GAAtC,UACE,cAAC,IAAD,CAASrB,QAAQ,mBACjB,cAAC,IAAD,UAAQyC,UCICE,EARD,SAAC,GAAD,QAAGF,YAAH,MAAU,oDAAV,SACZ,cAAC,IAAD,UACE,cAAC,IAAD,CAAMtC,GAAI,CAAEuC,WAAY,SAAUrB,GAAI,GAAtC,SACE,cAAC,IAAD,UAAOoB,SCYEG,EAXa,SAAC,GAAD,IAC1BnC,EAD0B,EAC1BA,SACAoC,EAF0B,EAE1BA,MACAC,EAH0B,EAG1BA,YAH0B,IAI1BC,sBAJ0B,MAIT,UAJS,SAM1B,cAAC,IAAD,UACGF,EAAQ,cAAC,EAAD,IAAY,mCAAIC,EAAkDrC,EAApC,cAAC,EAAD,CAASgC,KAAMM,SClB7CC,EAAU,CACrB,SACA,SACA,MACA,QACA,MACA,QACA,SACA,SACA,SACA,UAGWC,EAAW,WACtB,OAAOC,OAAOC,WAAa,MCOdC,EAnBK,SAACC,GAAkD,IAA5BC,EAA2B,uDAAT,KAAS,EACpCvC,qBADoC,mBAC7DwC,EAD6D,KACnDC,EADmD,KAgBpE,OAbAC,qBAAU,WACR,GAAKJ,IAAUE,EAAf,CAEA,IAAMG,EAAW,IAAIC,aACfC,EAASF,EAASG,wBAAwBR,GAC1CS,EAAIJ,EAASK,iBACnBD,EAAEE,sBAAwB,EAE1BJ,EAAOK,QAAQH,GACfA,EAAER,QAAUA,EACZE,EAAYM,MACX,CAACT,EAAQC,EAASC,IAEdA,GCOIW,EAAkB,SAACC,GACzB,OAALA,QAAK,IAALA,KAAOC,YAAYC,SAAQ,SAAAC,GACzBA,EAAEC,OACFJ,EAAMK,YAAYF,OAIPG,EA9BM,SAAC/D,GAA2D,IAAD,EACpDK,qBADoD,mBACvEoD,EADuE,KAChEO,EADgE,OAEpD3D,qBAFoD,mBAEvE8B,EAFuE,KAEhE8B,EAFgE,KAoB9E,OAhBAlB,qBAAU,WACJU,GACU,uCAAG,4BAAAL,EAAA,+EAEGc,UAAUC,aAAaC,aAAapE,GAFvC,QAEP4D,EAFO,QAGXS,iBAAiB,eAAe,WAChCC,QAAQC,IAAI,kBAEdP,EAASJ,GANI,gDAQbK,EAAS,EAAD,IARK,yDAAH,oDAYdO,KACC,CAACxE,EAAOyD,IACJ,CAACA,EAAOtB,IC8GFsC,EAzHA,WACb,IAAMC,EAAWC,iBAAyB,MADvB,EAEgBtE,qBAFhB,mBAEZuE,EAFY,KAEIC,EAFJ,OAGWxE,oBAAkB,GAH7B,mBAGZyE,EAHY,KAGHC,EAHG,OAIO1E,oBAAkB,GAJzB,mBAIZ8B,EAJY,KAIL8B,EAJK,OAKS5D,qBALT,mBAKZ2E,EALY,KAKJC,EALI,OAMHlB,EAAa,CAC3BmB,MAAO,CACLlE,MAXQ,IAYRmE,OAXS,OAQN1B,EANY,oBAab2B,EAAWC,uBACf,SAACC,IACW,uCAAG,WAAOA,GAAP,iBAAAlC,EAAA,yDACNwB,EADM,uBAETK,OAAUM,GAFD,0CAOTR,GAAW,GAPF,SAQYH,EAAeQ,SAASE,GARpC,OAQHE,EARG,OASHC,EAAaD,EAAOpE,KAAI,SAACsE,EAAGC,GAAJ,OAC5B,eAAC,IAAD,WACE,4BAAID,EAAEE,YADR,gBAC6BC,KAAKC,MAAsB,IAAhBJ,EAAEK,aAD1C,OAAUJ,MAKZV,EAAUQ,GACVV,GAAW,GAhBF,kDAkBTA,GAAW,GACXE,OAAUM,GACVjB,QAAQC,IAAR,MApBS,0DAAH,sDAuBVyB,CAAKV,KAEP,CAACV,IAYGqB,EAAaZ,sBAAW,sBAAC,sBAAAjC,EAAA,2EAE3ByB,EAF2B,SAEZqB,MAFY,kFAI3B5B,QAAQC,IAAR,MACAN,GAAS,GALkB,yDAO5B,CAACA,EAAUY,IAERsB,EAAYd,uBAAY,WACvBX,EAAS0B,SAAY3C,IAC1BiB,EAAS0B,QAAQC,iBAAmB,WAClC3B,EAAS0B,SAAW1B,EAAS0B,QAAQE,OACrCL,KAEFvB,EAAS0B,QAAQG,UAAY9C,KAC5B,CAACA,EAAOwC,IAUX,OARAlD,qBAAU,WAGR,OAFAoD,IAEO,WACL3C,EAAgBC,MAEjB,CAAC0C,EAAW1C,IAGb,eAAC,IAAD,CAAWpE,GAAG,UAAUC,QAAQ,iBAAhC,UACE,cAAC,IAAD,CAASD,GAAG,KAAZ,qCACA,cAAC,IAAD,CAASA,GAAG,KAAKC,QAAQ,YAAzB,sGAGA,cAAC,IAAD,CACEG,GAAI,CACFoB,SAAU,CAAC,WAAY,WAAY,YACnCe,IAAK,CAAC,EAAG,EAAG,QACZV,KAAM,CAAC,EAAG,EAAG,QACbF,MAAO,CAAC,OAAQ,OAAQ,QACxBmE,OAAQ,CAAC,OAAQ,OAAQ,QACzBqB,SAAU,CAAC,OAAQ,OA9Ff,KA+FJC,UAAW,CAAC,OAAQ,OA9Ff,KA+FLjG,OAAQ,EAAE,GAAI,EAAG,IATrB,SAYE,uBACEkG,MAAO,CACLC,UAAW,cAEb3F,MAAOuB,IAAaC,OAAOC,WAvGvB,IAwGJ0C,OAAQ5C,IAAaC,OAAOoE,YAvGvB,IAwGLC,IAAKnC,MAIT,eAAC,EAAD,CACEvC,MAAOA,EACPE,eAAe,sCACfD,cAAewC,EAHjB,UAKE,cAAC,IAAD,CAAQnF,GAAI,CAAEE,GAAI,GAAK2B,QApEX,WAChB,GAAKoD,EAAS0B,QACd,IACEhB,EAASV,EAAS0B,SAClB,MAAOU,GACPxC,QAAQC,IAAIuC,KA+DiCxH,QAAQ,UAAnD,qBAGCwF,GAAW,cAAC,EAAD,CAAS/C,KAAK,cACzBiD,GAAU,cAAC,IAAD,CAAKrF,GAAI,EAAT,SAAaqF,WC3BjB+B,EA9FQ,WACrB,IAAMF,EAAMlC,iBAAyB,MADV,EAEGtE,oBAAkB,GAFrB,mBAEpByE,EAFoB,KAEXC,EAFW,OAGiB1E,qBAHjB,mBAGpBuE,EAHoB,KAGJoC,EAHI,OAID3G,oBAAkB,GAJjB,mBAIpB8B,EAJoB,KAIb8B,EAJa,OAKL5D,mBAAiB,GALZ,mBAKpB4G,EALoB,KAKfC,EALe,OAMC7G,qBAND,mBAMpB2E,EANoB,KAMZC,EANY,KAQrBG,EAAWC,uBACf,SAACC,IACW,uCAAG,WAAOA,GAAP,iBAAAlC,EAAA,yDACNwB,EADM,uBAETG,GAAW,GACXE,OAAUM,GAHD,0CAQTR,GAAW,GARF,SASYH,EAAeQ,SAASE,GATpC,OASHE,EATG,OAUHC,EAAaD,EAAOpE,KAAI,SAACsE,EAAGC,GAAJ,OAC5B,eAAC,IAAD,WACE,4BAAID,EAAEE,YADR,gBAC6BC,KAAKC,MAAsB,IAAhBJ,EAAEK,aAD1C,OAAUJ,MAKZV,EAAUQ,GACVV,GAAW,GAjBF,kDAmBTA,GAAW,GACXE,OAAUM,GACVjB,QAAQC,IAAR,MArBS,0DAAH,sDAwBVyB,CAAKV,KAEP,CAACV,IAOGqB,EAAU,uCAAG,sBAAA7C,EAAA,2EAEf4D,EAFe,SAESd,MAFT,kCAGfnB,GAAW,GAHI,gDAKfT,QAAQC,IAAR,MACAN,GAAS,GANM,yDAAH,qDAchB,OAJAlB,qBAAU,WACRkD,MACC,IAGD,eAAC,IAAD,CAAW5G,GAAG,UAAUC,QAAQ,iBAAhC,UACE,cAAC,IAAD,CAASD,GAAG,KAAZ,oCACC8C,EACC,cAAC,EAAD,IACEyC,EACF,eAAC,IAAD,WACE,cAAC,IAAD,CACEuC,OA1BU,WACdN,EAAIT,SAAShB,EAASyB,EAAIT,UA2BtBS,IAAKA,EACLO,IAAI,MACJC,YAAY,YACZC,IAAG,uDAAkDL,GACrDxH,GAAI,CAAEgH,UAAW,IAAKzF,MAAO,SALxBiG,GAONjC,GAAU,cAAC,IAAD,CAAKrF,GAAI,EAAT,SAAaqF,IACxB,cAAC,IAAD,CACErF,GAAI,EACJL,QAAQ,UACRG,GAAI,CAAEgC,cAAeqD,EAAU,OAAS,UAAWyC,QAASzC,EAAU,GAAM,GAC5ExD,QAAS,WACPyD,GAAW,GACXE,OAAUM,GACV2B,EAAOD,EAAM,IAPjB,SAUGnC,EAAU,aAAe,uBAI9B,cAAC,EAAD,CAAS/C,KAAK,4C,0BdjFhByF,EAAQ,CAAC,OAAQ,KAAM,OAAQ,SAAU,SAASC,MAAK,SAACrE,EAAGsE,GAAJ,OAAUtE,EAAEuE,cAAcD,MA0KxEE,EAvKU,WACvB,IAAMlD,EAAWC,iBAAyB,MADb,EAEetE,qBAFf,mBAEtBuE,EAFsB,KAENoC,EAFM,OAGG3G,qBAHH,mBAGtBwH,EAHsB,KAGZC,EAHY,OAIDzH,qBAJC,mBAItB2E,EAJsB,KAIdC,EAJc,OAKe5E,oBAAkB,GALjC,mBAKtB0H,EALsB,KAKNC,EALM,OAMO3H,mBAAgB,IANvB,mBAMtB4H,EANsB,KAMVC,EANU,OAOG7H,oBAAkB,GAPrB,mBAOtB8H,EAPsB,KAOZC,EAPY,OAQH/H,oBAAkB,GARf,mBAQtB8B,EARsB,KAQf8B,EARe,OASbF,EAAa,CAC3BmB,MAAO,CACLlE,MAjBQ,IAkBRmE,OAjBS,OAcN1B,EATsB,oBAqBvB4E,EAAU,uCAAG,WAAOC,GAAP,mBAAAlF,EAAA,yDACZsB,EAAS0B,QADG,iDAEjB4B,GAAkB,GACdO,EAAI,EAHS,YAKVA,EAAI,IALM,wBAMTC,EANS,OAMI5D,QANJ,IAMIA,OANJ,EAMIA,EAAgB6D,MAAM/D,EAAS0B,YAC1B,OAARyB,QAAQ,IAARA,KAAUQ,WAAWG,EAAYF,IACjDC,IARe,UASTG,cATS,+BAYXC,EAAQ,sBAAIV,GAAJ,CAAgBK,IAASb,MAAK,SAACrE,EAAGsE,GAAJ,OAAUtE,EAAEuE,cAAcD,MACtEQ,EAAcS,GACdX,GAAkB,GAEdW,EAAMC,aAAepB,EAAMoB,YAC7BR,GAAY,GAjBG,4CAAH,sDAqBVS,EAAa,uCAAG,8BAAAzF,EAAA,yDACfyE,GAAanD,EAAS0B,QADP,sDAEhByB,EAASiB,gBAAkB,GAFX,uBAGZN,EAHY,OAGC5D,QAHD,IAGCA,OAHD,EAGCA,EAAgB6D,MAAM/D,EAAS0B,SAHhC,gBAIGyB,QAJH,IAIGA,OAJH,EAIGA,EAAUkB,aAAaP,GAJ1B,OAIZxD,EAJY,OAMlBC,EACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAK+D,GAAI,EAAGvJ,GAAI,CAAEwJ,WAAY,QAA9B,SACGjE,EAAOkE,QAETC,OAAOC,KAAKpE,EAAOqE,aAAajI,KAAI,SAACgC,EAAGuC,GAAJ,OACnC,eAAC,IAAD,WACGvC,EADH,KACQ4B,EAAOqE,YAAYjG,KADjBuC,UAZE,OAoBpB7G,EAAM0D,OAAO8G,sBAAsBT,GApBf,2CAAH,qDA2Bb5C,EAAaZ,sBAAW,sBAAC,sBAAAjC,EAAA,2EAE3B4D,EAF2B,SAEHd,MAFG,8CAG3B4B,EAH2B,SAGTyB,MAHS,oFAK3BjF,QAAQC,IAAR,MACAN,GAAS,GANkB,0DAQ5B,CAACA,EAAU6D,EAAad,IAErBb,EAAYd,uBAAY,WACvBX,EAAS0B,SAAY3C,IAC1BiB,EAAS0B,QAAQC,iBAAmB,WAClC3B,EAAS0B,SAAW1B,EAAS0B,QAAQE,OACrCL,KAEFvB,EAAS0B,QAAQG,UAAY9C,KAC5B,CAACA,EAAOwC,IAWX,OATAlD,qBAAU,WAGR,OAFI2B,EAAS0B,SAASD,IAEf,WA1EHrH,GAAK0D,OAAOgH,qBAAqB1K,GACrCA,OAAMyG,EA2EJ/B,EAAgBC,MAEjB,CAACiB,EAAUjB,EAAO0C,IAGnB,eAAC,IAAD,CAAW9G,GAAG,UAAUC,QAAQ,iBAAhC,UACE,cAAC,IAAD,CAASD,GAAG,KAAZ,+BACA,cAAC,IAAD,CAASA,GAAG,KAAKC,QAAQ,YAAzB,uFAGC6C,EACC,cAAC,EAAD,IAEA,uCACK0F,IAAajD,IACd,cAAC,EAAD,CAAS7C,KAAK,gDAEhB,eAAC,IAAD,CAAKtC,GAAI,CAAE+G,SApHP,KAoHJ,UACE,cAAC,IAAD,UACE,uBACEE,MAAO,CACLC,UAAW,cAEb3F,MA1HF,IA2HEmE,OA1HD,IA2HC0B,IAAKnC,MAGRmD,GAAYjD,GACX,qCACE,eAAC,IAAD,CACEjF,GAAI,EACJF,GAAI,CACF8H,QAASQ,EAAiB,GAAM,EAChCtG,cAAesG,EAAiB,OAAS,WAJ7C,WAOII,GACA,cAAC,IAAD,UACE,eAAC,IAAD,CAAM1I,GAAI,CAAEE,GAAI,EAAG8J,eAAgB,iBAAnC,UACE,cAAC,IAAD,CAAQnI,QAAS,kBAAM+G,EAAW,SAAS/I,QAAQ,YAAnD,kBAGA,cAAC,IAAD,CAAQgC,QAAS,kBAAM+G,EAAW,OAAO/I,QAAQ,YAAjD,gBAGA,cAAC,IAAD,CAAQgC,QAAS,kBAAM+G,EAAW,WAAW/I,QAAQ,YAArD,oBAGA,cAAC,IAAD,CAAQgC,QAAS,kBAAM+G,EAAW,SAAS/I,QAAQ,YAAnD,kBAGA,cAAC,IAAD,CAAQgC,QAAS,kBAAM+G,EAAW,UAAU/I,QAAQ,YAApD,wBAML6I,GACC,cAAC,IAAD,CAAQ7I,QAAQ,UAAUgC,QAvFjB,WACzBuH,KAsFuElJ,GAAI,EAA3D,qCAKJ,cAAC,IAAD,CAAKA,GAAI,EAAT,SAAaqF,iB,0BCvJzBlG,EAAM,EAQJ4K,GAAQ,IAAIC,IAGZC,GAAW,IAAIC,IACjBC,GAAsB,GACpBpK,GAAe,IAAIqK,IACrBC,GAAmB,GAIjBC,GAAsB,CAC1BpJ,SAAU,WACVqJ,OAAQ,EACRC,MAAO,EACP,UAAW,CACTtJ,SAAU,sBAmKCuJ,GA/JE,WACf,IAAM1F,EAAWC,iBAAyB,MACpC0F,EAAY1F,iBAA0B,MACtC2F,EAAW3F,iBAAuB,MAHnB,EAIKtE,oBAAkB,GAJvB,mBAId8B,EAJc,KAIP8B,EAJO,OAKS5D,oBAAkB,GAL3B,mBAKdyE,EALc,KAKLC,EALK,OAMLhB,EAAa,CAC3BmB,MAAO,CACLqF,WAAY,OACZvJ,MAjCQ,IAkCRmE,OAjCS,OA6BN1B,EANc,oBAcf+G,EAAkBnF,sBAAW,sBAAC,kCAAAjC,EAAA,kEAE3BrE,GAAU2F,EAAS0B,SAAYiE,EAAUjE,QAFd,uBAG9BtH,EAAMwK,sBAAsBkB,GAHE,0CAONzL,EAAM0L,cAAc,CAC5CC,eAAe,EACfC,gBAAgB,EAChBC,MAAOlG,EAAS0B,UAVc,OAO1ByE,EAP0B,OAahCf,GAAY,GACZE,GAAS,GAduB,EAgBNK,EAAUjE,QAA5BpF,EAhBwB,EAgBxBA,MAAOmE,EAhBiB,EAgBjBA,OACJ,OAAX0F,QAAW,IAAXA,KAAalH,SAAQ,SAAAmH,GAAK,IAEhBC,EAAgBD,EAAhBC,YAER5B,OAAOC,KAAK2B,GAAapH,SAAQ,SAACP,EAAGuC,GACnCjG,GAAMsL,OAAO1I,EAAQqD,GAASrD,EAAQ2I,OAAS,KAC/CF,EAAY3H,GAAGO,SAAQ,SAAC4E,GACtBuB,GAAUoB,KAAK3C,EAAE,GAAKvH,EAAQ,EAAGmE,EAAS,EAAIoD,EAAE,IAAKA,EAAE,IACvDyB,GAAOkB,KAAKxL,GAAM2B,EAAG3B,GAAMyL,EAAGzL,GAAMgI,YAK1CkC,GAASwB,aAAa,WAAY,IAAIC,IAAuBvB,GAAW,IACxEF,GAASwB,aAAa,QAAS,IAAIC,IAAuBrB,GAAQ,IAClEJ,GAAS0B,wBACTpM,EAAO0K,SAAS2B,WAAW1K,SAAS2K,aAAc,EAElDvM,EAASwM,OAAO/B,GAAO1K,GACvBG,EAAMuM,SApC0B,kDAsChCpH,QAAQC,IAAR,MAtCgC,QAyClCzF,EAAMwK,sBAAsBkB,GAzCM,0DA0CjC,IAEGmB,EAAYtG,sBAAW,sBAAC,sBAAAjC,EAAA,sEAE1B2B,GAAW,GAFe,SAGZ6G,IACZA,IAAyCC,mBAJjB,OAG1B9M,EAH0B,OAO1BgG,GAAW,GACXyF,IAR0B,gDAU1BzF,GAAW,GACXd,GAAS,GAXiB,yDAa3B,CAACuG,IA8CJ,OA5CAzH,qBAAU,WACR,GAAK2B,EAAS0B,SAAY3C,EAoC1B,OAnCAiB,EAAS0B,QAAQG,UAAY9C,EAC7BiB,EAAS0B,QAAQC,iBAAmB,WAAO,IAAD,EAGxC,GAFA,UAAA3B,EAAS0B,eAAT,SAAkBE,OAEb+D,EAAUjE,QAAf,CAHwC,MAIdiE,EAAUjE,QAA5BpF,EAJgC,EAIhCA,MAAOmE,EAJyB,EAIzBA,QAEfnG,EAAS,IAAI8M,IAAkB,GAAI9K,EAAQmE,EAAQ,GAAK,MACjDtE,SAASkL,EAAI/K,EAAQ,EAE5B,IAAMgL,GAAU,IAAIC,KAAgBjG,KAClC,gGAIF/G,EAAW,IAAIiN,IAAc,CAC3BC,OAAQ9B,EAAUjE,QAClBgG,OAAO,KAGAC,QAAQrL,EAAOmE,GAExB,IAKY,EALNmH,EAAW,IAAIC,IAAe,CAAEC,KAAM,GAAIC,cAAc,EAAMrL,IAAK4K,IAKzE,GAHA9M,EAAS,IAAIwN,IAAO9C,GAAU0C,GAC9B5C,GAAMiD,IAAIzN,IAELC,EACHA,EAAQyN,cACR,UAAAtC,EAASlE,eAAT,SAAkByG,YAAY1N,EAAM2N,KAGtCnB,MAGK,WAAO,IAAD,EACXnC,qBAAqB1K,GACrB0E,EAAgBC,GACX,QAAL,EAAAtE,SAAA,SAAO4N,SAER,CAACtJ,EAAOkI,EAAWjH,EAAU2F,EAAWC,IAGzC,eAAC,IAAD,CAAWjL,GAAG,UAAUC,QAAQ,iBAAhC,UACE,cAAC,IAAD,CAASD,GAAG,KAAZ,uBACA,eAAC,IAAD,CAASA,GAAG,KAAKC,QAAQ,YAAzB,2EACgE,uBAC9D,uBAFF,yHAMC6C,EACC,cAAC,EAAD,IAEA,qCACG2C,GACC,cAAC,IAAD,CAAKnF,GAAI,EAAT,SACE,cAAC,EAAD,CAASoC,KAAK,mCAGlB,eAAC,IAAD,CAAKtC,GAAI,CAAEoB,SAAU,WAAYlB,GAAI,GAArC,UACE,uBAAO+G,MAAO,CAAEa,QAAS,IAAOV,IAAKnC,EAAU1D,MAhK7C,IAgK2DmE,OA/J1D,MAgKH,wBACE0B,IAAKwD,EACL3D,MAAO,CACL7F,SAAU,WACVe,IAAK,EACLV,KAAM,GAERF,MAxKA,IAyKAmE,OAxKC,YA6KT,cAAC,IAAD,CAEE1F,GAAIwK,GACJpD,IAAKyD,Q,Uc3BE0C,GApKW,WAAO,IAAD,EACJ3M,qBADI,mBACvBtB,EADuB,KAChB8F,EADgB,OAEYxE,qBAFZ,mBAEvB4M,EAFuB,KAERC,EAFQ,OAGE7M,qBAHF,mBAGvB8M,EAHuB,KAGbC,EAHa,OAIA/M,oBAAkB,GAJlB,mBAIvByE,EAJuB,KAIdC,EAJc,OAKU1E,oBAAkB,GAL5B,mBAKvBgN,EALuB,KAKTC,EALS,OAMJjN,qBANI,mBAMvBkN,EANuB,KAMhBC,EANgB,OAOYnN,qBAPZ,mBAOvBoN,EAPuB,KAORC,EAPQ,OAQJrN,mBACxB,4DAT4B,mBAQvBsN,EARuB,KAQhBC,EARgB,OAWJvN,oBAAkB,GAXd,mBAWvB8B,EAXuB,KAWhB8B,EAXgB,KAaxB0H,EAAS,uCAAG,sBAAAvI,EAAA,sEAEd2B,GAAW,GAFG,KAGdmI,EAHc,SAGSW,aAAa,GAAK,IAH3B,8CAIdhJ,EAJc,UAICiJ,YArBH,+EAiBE,+CAKdV,EALc,UAKWW,MApB7B,kFAekB,gCAKgCC,OALhC,mCAMdjJ,GAAW,GANG,kDAQdd,GAAS,GARK,0DAAH,qDAgBTgK,EAAS,uCAAG,WAAOnH,GAAP,uBAAA1D,EAAA,yDAChB0D,EAAEoH,iBACGf,GAAapO,EAFF,wDAIhBuO,GAAgB,GAChBE,OAASjI,GACTmI,OAAiBnI,GAEX4I,EAAUR,EACbS,OACAC,cACAC,QAAQ,cAAe,IACvBC,MAAM,KAEHC,EAAWL,EAAQ/M,KAAI,SAAAqN,GAC3B,IAAMC,EAAYvB,EAASwB,WAAWF,GACtC,MAAyB,qBAAdC,EACF,EAEFA,EAAYvB,EAASyB,cAGxBC,EAAgB,IAAIC,MAAM3B,EAAS4B,QAAUP,EAASvD,QAAQ+D,KAAK,GAAGC,OAAOT,GAE7EU,EAAcC,YAASN,EAAe,CAAC,EAAG1B,EAAS4B,UACnDK,EAAarQ,EAAMsQ,QAAQH,GAEjC1B,EAAS4B,EAAWE,WAAW,IAE/BF,EAAWG,UA7BK,KA+BhB7B,EA/BgB,iBA+BOT,QA/BP,IA+BOA,OA/BP,EA+BOA,EAAe7H,SAAS,CAACuI,IA/BhC,mCAgChBL,GAAgB,GAhCA,4CAAH,sDAuCf,OAJAvK,qBAAU,WACR4I,MACC,IAGD,eAAC,IAAD,CAAWtM,GAAG,UAAUC,QAAQ,iBAAhC,UACE,cAAC,IAAD,CAASD,GAAG,KAAZ,gCACA,cAAC,IAAD,CAASA,GAAG,KAAKC,QAAQ,YAAzB,kDAGC6C,EACC,cAAC,EAAD,IAEA,qCACG2C,GAAW,cAAC,EAAD,CAAS/C,KAAK,2CACxB+C,GACA,qCACE,eAAC,IAAD,CAAKzF,GAAG,OAAOI,GAAI,CAAEoB,SAAU,YAAc2O,SAAUvB,EAAvD,UACE,cAAC,IAAD,CACEwB,UAAW,IACXC,aAAa,MACb/P,GAAI,EACJgQ,SA7DC,SAACC,GAChBhC,EAASgC,EAAIC,cAAcC,QA6DbA,MAAOnC,EACPhM,KAAK,UAEP,eAAC,IAAD,CAAKlC,GAAI,CAAEoB,SAAU,WAAYqJ,QAAS,GAAIC,MAAO,MAAO4F,SAAU,GAAtE,UACGpC,EAAM1C,OADT,aAIDsC,GAASE,GACR,eAAC,IAAD,CAAK9N,GAAI,EAAT,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASA,GAAI,EAAGN,GAAG,KAAnB,8BAGA,cAAC,IAAD,CACEA,GAAG,OACHM,GAAI,EACJF,GAAI,CACFC,MAAO6N,EAAQ,IAAO,QAAUA,EAAQ,IAAO,MAAQ,UAJ3D,SAOGA,OAGL,eAAC,IAAD,CAAM5N,GAAI,EAAV,UACE,cAAC,IAAD,CAASA,GAAI,EAAGN,GAAG,KAAnB,uBADF,OAIGoO,QAJH,IAIGA,OAJH,EAIGA,EAAerM,KAAI,SAAC4O,EAAQrK,GAAT,OAClB,eAAC,IAAD,CACEhG,GAAI,EACJsQ,GAAI,EAEJxQ,GAAI,CAAE8H,QAASyI,EAAEE,QAAQC,OAAM,SAAC/M,GAAD,OAAYA,EAAEgN,SAAS,EAAI,IAJ5D,UAME,4BAAIJ,EAAE9G,QANR,IAOG8G,EAAEE,QAAQ9O,KAAI,SAACC,EAAQkH,GAAT,OACb,eAAC,IAAD,CAAK5I,GAAI,EAAT,UACE,eAAC,IAAD,CAAMF,GAAI,CAAEwQ,GAAI,GAAhB,4BACkBI,KAAKC,UAAUjP,EAAEkP,kBAEnC,eAAC,IAAD,CAAM9Q,GAAI,CAAEwQ,GAAI,GAAhB,mBACS,IACP,cAAC,IAAD,CACE5Q,GAAG,OACHI,GAAI,CACFC,MAAO2B,EAAE+O,MAAQ,QAAU,OAC3BnH,WAAY5H,EAAE+O,MAAQ,OAAS,UAJnC,SAOGC,KAAKC,UAAUjP,EAAE+O,cAbP7H,QALd5C,YA4Bf,cAAC,IAAD,CACElG,GAAI,CACF8H,QAAS8F,EAAe,GAAM,EAC9B5L,cAAe4L,EAAe,OAAS,WAEzC1N,GAAI,EACJ2B,QAAS2M,EANX,SAQIZ,EAA2B,aAAZ,sB,UC9J7BvO,GAAM,EA4JK0R,GA1JD,WAAO,IAAD,EACFzM,EAAa,CAAE0M,OAAO,IAA/BhN,EADW,oBAEZZ,EAAWH,EAAYe,GAFX,EAGQpD,qBAHR,mBAGXtB,EAHW,KAGJ8F,EAHI,KAIZwF,EAAY1F,iBAA0B,MAJ1B,EAKQtE,oBAAkB,GAL1B,mBAKX8B,EALW,KAKJ8B,EALI,OAMU5D,qBANV,mBAMX2E,EANW,KAMHC,EANG,KAiCZyL,EAAerL,uBAAY,WAC/B,GAAKxC,GAAawH,EAAUjE,QAA5B,CAKA,IAAMuK,EAAMtG,EAAUjE,QAAQwK,WAAW,MAEzC,GAAKD,EAAL,CAKA,IAAME,EAAW,IAAIC,WAAWjO,EAASkO,mBACzClO,EAASmO,qBAAqBH,GAE9B,IAAMI,EAAYN,EAAIO,aAAa,EAAG,EAAG7G,EAAUjE,QAAQpF,MAAQ,EAAGqJ,EAAUjE,QAAQjB,QACxFwL,EAAIQ,aAAaF,EAAW,EAAG,GA1Cd,SACjBJ,EACAF,EACAxE,GAEA,IAAK,IAAI5D,EAAI,EAAGA,EAAIsI,EAAS5F,OAAQ1C,IAAK,CACxC,IAAIuH,EAAQ,EAAIe,EAAStI,GAAK,IAE1B6I,EAAavL,KAAKwL,IAAI,EAAG,IAAMvB,GACnCsB,EAAavL,KAAKyL,IAAIF,EAAY,GAClCA,EAAavL,KAAKC,MAAM,IAAMsL,GAC9B,IAAMG,EAAS,cAAUH,EAAV,YAAwB,IAAMA,EAA9B,YAA4C,IAAMA,EAAlD,KAEfT,EAAIa,YACJb,EAAIc,YAAcF,EAClBZ,EAAIe,OAAOvF,EAAOnL,MAAQ,EAAGmL,EAAOhH,OAASoD,GAAK4D,EAAOhH,OAAS0L,EAAS5F,SAE3E0F,EAAIgB,OACFxF,EAAOnL,MAAQ,EACfmL,EAAOhH,OAAUoD,EAAI4D,EAAOhH,OAAU0L,EAAS5F,OAASkB,EAAOhH,OAAS0L,EAAS5F,QAEnF0F,EAAIiB,UAuBNC,CAAWhB,EAAUF,EAAKtG,EAAUjE,SAEpCtH,GAAMwK,sBAAsBoH,QAZ1B5R,GAAMwK,sBAAsBoH,QAP5B5R,GAAMwK,sBAAsBoH,KAoB7B,CAAC7N,IAEE8I,EAAYtG,sBAAW,sBAAC,oCAAAjC,EAAA,sEAEpB0O,EAAMtP,OAAOrC,SAAS4R,OACtBC,EAHoB,UAGDF,EAHC,qBAIpBG,EAJoB,UAIHH,EAJG,wBAMpBI,EAAaC,KACjB,mBACA5M,EACAyM,EACAC,GAVwB,SAcpBC,EAAWE,oBAdS,cAgB1BvN,EAASqN,GACHG,EAAcH,EAAWI,aAE/B5B,IAnB0B,UAqBpBwB,EAAWK,QAEf,SAAAvN,GACE,IAAMkL,EAAU/G,OAAOC,KAAKiJ,GAAaG,QAAO,SAACC,EAAKC,EAAI/M,GACxD,IAAMgN,EACJN,EAAY1M,GAAS,KAAOiN,OAAO5N,EAAO6N,OAAOlN,IAAQmN,QAAQ,GAMnE,OALAL,EAAIvH,KACF,cAAC,IAAD,CAAKzL,GAAI,CAAE8H,QAASvC,EAAO6N,OAAOlN,GAAS,GAAM,EAAI,IAArD,SACGgN,GAD8DD,IAI5DD,IACN,IAEHxN,EAAUiL,KAEZ,CACE6C,oBAAoB,EACpBC,qBAAsB,IACtBC,iCAAiC,EACjCC,cAAe,KAzCO,0DA6C1BjP,GAAS,GA7CiB,0DA+C3B,CAACA,EAAUyM,IAYd,OAVA3N,qBAAU,WACR,GAAKF,GAAawH,EAAUjE,QAG5B,OAFAuF,IAEO,WACLnI,EAAgBC,GAChB+F,qBAAqB1K,OAEtB,CAACuL,EAAWxH,EAAU8I,EAAWlI,IAGlC,eAAC,IAAD,CAAWpE,GAAG,UAAUC,QAAQ,iBAAhC,UACE,cAAC,IAAD,CAASD,GAAG,KAAZ,4BACA,eAAC,IAAD,CAASA,GAAG,KAAKC,QAAQ,YAAzB,oCAC0B,IACxB,cAAC,IAAD,CAAMD,GAAG,OAAOI,GAAI,CAAEC,MAAO,SAA7B,mBAFF,MAKM,IACJ,cAAC,IAAD,CAAML,GAAG,OAAOI,GAAI,CAAEC,MAAO,SAA7B,kBAEQ,IARV,gBASgB,IACd,cAAC,IAAD,CAAML,GAAG,OAAOI,GAAI,CAAEC,MAAO,SAA7B,sBAEQ,IAZV,MAaM,IACJ,cAAC,IAAD,CAAML,GAAG,OAAOI,GAAI,CAAEC,MAAO,SAA7B,oBAEQ,IAhBV,eAiBe,IACb,cAAC,IAAD,CAAMH,KAAK,0CAA0CC,OAAO,SAA5D,+BAEQ,IApBV,kBAuBA,wBAAQqH,IAAKwD,EAAWrJ,MAAO,IAAKmE,OAAQ,MAC5C,cAAC,EAAD,CACEhD,MAAOA,EACPE,eAAe,+BACfD,cAAerD,EAHjB,SAKE,cAAC,IAAD,UAAMiG,GAAU,uB,UdlIpBjG,QAAuCwG,EACvCzG,GAAM,EAEJ4K,GAAQ,IAAIC,IAGZC,GAAW,IAAIC,IACjBC,GAAsB,GACpBpK,GAAe,IAAIqK,IACrBC,GAAmB,GAIjBC,GAAsB,CAC1BpJ,SAAU,WACVqJ,OAAQ,EACRC,MAAO,EACP,UAAW,CACTtJ,SAAU,sBA8JCsS,GArJE,WACf,IAAM9I,EAAY1F,iBAA0B,MACtCD,EAAWC,iBAAyB,MACpC2F,EAAW3F,iBAAuB,MAHnB,EAIStE,oBAAS,GAJlB,mBAIdyE,EAJc,KAILC,EAJK,OAKJhB,EAAa,CAC5BmB,MAAO,CACLlE,MArCQ,IAsCRmE,OArCS,OAkCNxC,EALc,sBAWKtC,oBAAkB,GAXvB,mBAWd8B,EAXc,KAWP8B,EAXO,KAafmP,EAAgB/N,sBAAW,sBAAC,oCAAAjC,EAAA,uEAEVsB,EAAS0B,SAFC,+CAEiBrH,UAFjB,aAEiB,EAAOqU,cAAc1O,EAAS0B,SAF/C,0BAExByE,EAFwB,KAI1BR,EAAUjE,UACZ0D,GAAY,GACZE,GAAS,GAFY,EAGKK,EAAUjE,QAA5BpF,EAHa,EAGbA,MAAOmE,EAHM,EAGNA,OACJ,OAAX0F,QAAW,IAAXA,KAAalH,SAAQ,SAAAmH,GACnB3B,OAAOC,KAAK0B,EAAEC,aAAapH,SAAQ,SAACP,EAAGuC,GACrCjG,GAAMsL,OAAO1I,EAAQqD,GAASrD,EAAQ2I,OAAS,KAC/CH,EAAEC,YAAY3H,GAAGO,SAAQ,SAAA4E,GACvBuB,GAAUoB,KAAK3C,EAAE,GAAKvH,EAAQ,EAAGmE,EAAS,EAAIoD,EAAE,IAAKA,EAAE,IACvDyB,GAAOkB,KAAKxL,GAAM2B,EAAG3B,GAAMyL,EAAGzL,GAAMgI,YAK1CkC,GAASwB,aAAa,WAAY,IAAIC,IAAuBvB,GAAW,IACxEF,GAASwB,aAAa,QAAS,IAAIC,IAAuBrB,GAAQ,IAClEJ,GAAS0B,wBACTpM,EAAO0K,SAAS2B,WAAW1K,SAAS2K,aAAc,GAGpDvM,EAASwM,OAAO/B,GAAO1K,GACvBG,EAAMuM,SACN5M,GAAMwK,sBAAsB8J,GA1BE,kDA4B9B9O,QAAQC,IAAR,MA5B8B,0DA8B/B,IAEGoH,EAAYtG,sBAAW,sBAAC,sBAAAjC,EAAA,sEAE1B2B,GAAW,GAFe,SAGZsO,OAHY,OAG1BtU,GAH0B,OAI1BgG,GAAW,GACXqO,IAL0B,gDAO1BnP,GAAS,GACTK,QAAQC,IAAR,MAR0B,yDAU3B,CAACQ,EAAYqO,IAkDhB,OAhDArQ,qBAAU,WACR,GAAK2B,EAAS0B,SAAYiE,EAAUjE,SAAYzD,EAAhD,CACA+B,EAAS0B,QAAQG,UAAY5D,EAC7B+B,EAAS0B,QAAQC,iBAAmB,WAClC3B,EAAS0B,QAASE,OAClBqF,KALY,MAQYtB,EAAUjE,QAA5BpF,EARM,EAQNA,MAAOmE,EARD,EAQCA,QAEfnG,EAAS,IAAI8M,IAAkB,GAAI9K,EAAQmE,EAAQ,GAAK,MACjDtE,SAASkL,EAAI/K,EAAQ,EAE5B,IAAMgL,GAAU,IAAIC,KAAgBjG,KAClC,gGAIF/G,EAAW,IAAIiN,IAAc,CAC3BC,OAAQ9B,EAAUjE,QAClBgG,OAAO,KAGAC,QAAQrL,EAAOmE,GAExB,IAKY,EALNmH,EAAW,IAAIC,IAAe,CAAEC,KAAM,GAAIC,cAAc,EAAMrL,IAAK4K,IAKzE,GAHA9M,EAAS,IAAIwN,IAAO9C,GAAU0C,GAC9B5C,GAAMiD,IAAIzN,IAELC,EACHA,EAAQyN,cACR,UAAAtC,EAASlE,eAAT,SAAkByG,YAAY1N,EAAM2N,KAOtC,OAAO,WAELtD,qBAAqB1K,IACrB0E,EAAgBb,GAChB7D,GAAM,EACNK,EAAM4N,UAEP,CAAC1C,EAAW3F,EAAU/B,EAAQgJ,IAG/B,eAAC,IAAD,CAAWtM,GAAG,UAAUC,QAAQ,iBAAhC,UACE,cAAC,IAAD,CAASD,GAAG,KAAZ,uBACA,eAAC,IAAD,CAASA,GAAG,KAAKC,QAAQ,YAAzB,kGAEE,uBACA,uBAHF,yHAOC6C,EACC,cAAC,EAAD,IAEA,qCACG2C,GACC,cAAC,IAAD,CAAKnF,GAAI,EAAT,SACE,cAAC,EAAD,CAASoC,KAAK,8BAGlB,eAAC,IAAD,CAAKtC,GAAI,CAAEE,GAAI,EAAGkB,SAAU,YAA5B,UACE,uBACE6F,MAAO,CAAEa,QAAS,GAAKZ,UAAW,cAClCE,IAAKnC,EACL1D,MA9JA,IA+JAmE,OA9JC,MAgKH,wBACEuB,MAAO,CAAEC,UAAW,aAAc9F,SAAU,WAAYe,IAAK,EAAGV,KAAM,GACtE2F,IAAKwD,EACLrJ,MApKA,IAqKAmE,OApKC,YAyKT,cAAC,IAAD,CAEE1F,GAAIwK,GACJpD,IAAKyD,Q,UC3LPgJ,GAAQ,IACRC,GAAS,IAEXzU,GAAM,EAGN6R,GAAuC,KAErC1G,GAAsB,CAC1BpJ,SAAU,WACVqJ,OAAQ,EACRC,MAAO,EACP,UAAW,CACTtJ,SAAU,sBA2HC2S,GAvHc,WAC3B,IAAMnJ,EAAY1F,iBAA0B,MACtCD,EAAWC,iBAAyB,MACpC2F,EAAW3F,iBAAuB,MAHP,EAIHtE,oBAAS,GAJN,mBAI1ByE,EAJ0B,KAIjBC,EAJiB,OAKP1E,oBAAkB,GALX,mBAK1B8B,EAL0B,KAKnB8B,EALmB,OAMjBF,EAAa,CAC3BmB,MAAO,CACLlE,MAAOsS,GACPnO,OAAQoO,MAHL9P,EAN0B,oBAa3BgQ,EAAgBpO,sBAAW,sBAAC,sBAAAjC,EAAA,oEAE1BuN,IAAOjM,EAAS0B,SAAWiE,EAAUjE,SAFX,wBAG5BuK,GAAI+C,OACJ/C,GAAIgD,OAAO,EAAG,GACdhD,GAAIiD,UAAUlP,EAAS0B,QAAS,EAAG,GAAGkN,IAAYC,IAClD5C,GAAIkD,UANwB,SAOF9U,EAAM+U,OAAOzJ,EAAUjE,SAPrB,cAQhBzC,SAAQ,SAAAmH,GAClB,GAAK6F,GAAL,CAEAA,GAAIa,YACJb,GAAIoD,WAAWjJ,EAAEkJ,KAAK,GAAIlJ,EAAEkJ,KAAK,GAAIlJ,EAAEkJ,KAAK,GAAIlJ,EAAEkJ,KAAK,IACvDrD,GAAIiB,SAEJjB,GAAIsD,KACF,qJAEF,IAAMlS,EAAI,UAAM+I,EAAEoJ,MAAR,aAAkBrO,KAAKC,MAAgB,IAAVgF,EAAEyC,OAA/B,KAEFvM,EAAU2P,GAAIwD,YAAYpS,GAA1Bf,MACR2P,GAAIY,UAAY,OAChBZ,GAAIyD,SAAStJ,EAAEkJ,KAAK,GAAK,EAAGlJ,EAAEkJ,KAAK,GAAK,GAAIhT,EAAQ,GAAI,IAExD2P,GAAIY,UAAY,OAChBZ,GAAI0D,SAAStS,EAAM+I,EAAEkJ,KAAK,GAAK,EAAGlJ,EAAEkJ,KAAK,GAAK,QAzBpB,QA6B9B7U,EAAMuM,SACN5M,GAAMwK,sBAAsBmK,GA9BE,kDAgC9BnP,QAAQC,IAAR,MAhC8B,0DAkC/B,IAEGoH,EAAYtG,sBAAW,sBAAC,sBAAAjC,EAAA,sEAE1B2B,GAAW,GAFe,SAGZuP,UAHY,OAG1BvV,EAH0B,OAI1BgG,GAAW,GACX0O,IAL0B,gDAO1BxP,GAAS,GACTK,QAAQC,IAAR,MAR0B,yDAU3B,CAACQ,EAAY0O,IAwBhB,OAtBA1Q,qBAAU,WACR,GAAK2B,EAAS0B,SAAYiE,EAAUjE,SAAY3C,EAAhD,CASa,IAAD,EAAZ,GARAiB,EAAS0B,QAAQG,UAAY9C,EAC7BiB,EAAS0B,QAAQC,iBAAmB,WAAO,IAAD,EAChC,OAAR3B,QAAQ,IAARA,GAAA,UAAAA,EAAU0B,eAAV,SAAmBE,OACnBqF,KAGFgF,GAAMtG,EAAUjE,QAAQwK,WAAW,OAE9BzR,EACHA,EAAQyN,cACR,UAAAtC,EAASlE,eAAT,SAAkByG,YAAY1N,EAAM2N,KAGtC,OAAO,WACLtD,qBAAqB1K,IACrB0E,EAAgBC,GAChB3E,GAAM,MAEP,CAACuL,EAAW3F,EAAUjB,EAAOkI,IAG9B,eAAC,IAAD,CAAWtM,GAAG,UAAUC,QAAQ,iBAAhC,UACE,cAAC,IAAD,CAASD,GAAG,KAAZ,wCACA,cAAC,IAAD,CAASA,GAAG,KAAKC,QAAQ,YAAzB,iFAGC6C,EACC,cAAC,EAAD,IAEA,qCACG2C,GAAW,cAAC,EAAD,CAAS/C,KAAK,2BAC1B,eAAC,IAAD,CAAKtC,GAAI,CAAEoB,SAAU,YAArB,UACE,uBACE6F,MAAO,CAAEa,QAAS,GAAKZ,UAAW,cAClCE,IAAKnC,EACL1D,MAAOsS,GACPnO,OAAQoO,KAEV,wBACE7M,MAAO,CAAE7F,SAAU,WAAYe,IAAK,EAAGV,KAAM,GAC7C2F,IAAKwD,EACLrJ,MAAOsS,GACPnO,OAAQoO,WAKhB,cAAC,IAAD,CAEE9T,GAAIwK,GACJpD,IAAKyD,Qc9HKiK,GAAaC,EAAQ,KAA/BC,SAqDOtT,GAnDA,CACb,CACEK,KAAM+S,GACNG,UAAWtV,EACXuC,KAAM,OACNgT,OAAO,GAET,CACEnT,KAAK,GAAD,OAAK+S,GAAL,mBACJG,UAAW3N,EACXpF,KAAM,0BAER,CACEH,KAAK,GAAD,OAAK+S,GAAL,0BACJG,UAAWlB,GACX7R,KAAM,uBAER,CACEH,KAAK,GAAD,OAAK+S,GAAL,UACJG,UAAWjQ,EACX9C,KAAM,sBAER,CACEH,KAAK,GAAD,OAAK+S,GAAL,qBACJG,UAAW9M,EACXjG,KAAM,qBAER,CACEH,KAAK,GAAD,OAAK+S,GAAL,aACJG,UAAW1H,GACXrL,KAAM,sBAER,CACEH,KAAK,GAAD,OAAK+S,GAAL,YACJG,UAAWtK,GACXzI,KAAM,aAGR,CACEH,KAAK,GAAD,OAAK+S,GAAL,aACJG,UAAWvB,GACXxR,KAAM,aAGR,CACEH,KAAK,GAAD,OAAK+S,GAAL,kBACJG,UAAWlE,GACX7O,KAAM,mBCzCKiT,GAfH,kBACV,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAD,UACGzT,GAAOC,KAAI,WAAwCuE,GAAxC,IAAGgP,EAAH,EAAGA,MAAOnT,EAAV,EAAUA,KAAiBqT,EAA3B,EAAgBH,UAAhB,OACV,cAAC,IAAD,CAAOC,MAAOA,EAAmBnT,KAAMA,EAAvC,SACE,cAACqT,EAAD,KADwBlP,cCErBmP,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCPRQ,GAAgB,CACpBC,QAAS,QA2MIC,GAxMM,CACnBC,MAAO,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,KACvCC,MAAO,CACLC,KACE,gJACFC,QAAS,UACTC,UAAW,oBAEbC,YAAa,CAAC,OAAQ,OAAQ,QAC9BC,UAAW,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC5CC,YAAa,CACXL,KAAM,IACNC,QAAS,IACTK,KAAM,KAERC,YAAa,CACXP,KAAM,IACNC,QAAS,KAEXO,MAAO,CACLC,UAAW,QAEbC,OAAQ,CACNC,QAAS,CACPC,GAAI,CAAC,EAAG,EAAG,GACX9V,GAAI,EACJM,MAAO,SAGXyV,QAAS,CACPC,KAAK,eACAnB,IAELoB,QAAQ,2BACHpB,IADE,IAELqB,OAAQ,UACRC,GAAI,QACJnX,MAAO,YACPuB,WAAY,mBACZ,UAAW,CACT4V,GAAI,YACJnX,MAAO,WAGXoX,UAAU,2BACLvB,IADI,IAEPsB,GAAI,YACJnX,MAAO,QACPkX,OAAQ,aAGZ5M,OAAQ,CACNjI,KAAM,OACNnB,WAAY,OACZ+V,QAAS,OACTI,KAAM,UACND,UAAW,OACXE,MAAO,oBACPC,MAAO,OACPC,KAAM,QAERC,MAAO,CACLpV,KAAM,CACJrC,MAAO,QACP,UAAW,CACT0X,eAAgB,SAGpBC,IAAK,CACHtH,SAAU,CAAC,EAAG,EAAG,GACjBuH,GAAI,EACJC,GAAI,CAAC,EAAG,EAAG,GACX7X,MAAO,UACPuB,WAAY,qBACZ,WAAY,CACVvB,MAAO,SAET,UAAW,CACTA,MAAO,SAET,UAAW,CACT6H,QAAS,MAIfxF,KAAM,CACJ8T,QAAS,CACP7M,GAAI,GAENwO,QAAS,CACPxO,GAAI,IAGRyO,OAAQ,CACNC,KAAM,CACJC,WAAY,OACZC,WAAY,OACZ3O,WAAY,OACZ4O,cAAe,QACfhB,GAAI,SAENiB,GAAI,CACFpY,MAAO,OACPiY,WAAY,UACZC,WAAY,UACZ3O,WAAY,UACZ8G,SAAU,GAEZgI,GAAI,CACFJ,WAAY,UACZC,WAAY,UACZ3O,WAAY,UACZ8G,SAAU,GAEZiI,GAAI,CACFtY,MAAO,QACPiY,WAAY,UACZC,WAAY,UACZ3O,WAAY,UACZ8G,SAAU,EACVzQ,QAAS,gBAEX2Y,GAAI,CACFvY,MAAO,QACPiY,WAAY,UACZC,WAAY,UACZ3O,WAAY,OACZ8G,SAAU,EACVzQ,QAAS,gBAEX4Y,GAAI,CACFxY,MAAO,OACPiY,WAAY,UACZC,WAAY,UACZ3O,WAAY,UACZ8G,SAAU,GAEZoI,GAAI,CACFzY,MAAO,OACPiY,WAAY,UACZC,WAAY,UACZ3O,WAAY,UACZ8G,SAAU,GAEZjF,EAAG,CACDpL,MAAO,OACPiY,WAAY,OACZ1O,WAAY,OACZ2O,WAAY,QAEdxU,EAAG,CACD1D,MAAO,WAET0Y,IAAK,CACHb,GAAI,EACJzM,EAAG,EACH6M,WAAY,YACZU,UAAW,OACXnB,KAAM,CACJxX,MAAO,QAET8G,SAAU,QACV8R,aAAc,MACdzB,GAAI,OACJnX,MAAO,SAGT6Y,QAAS,CACP/L,KAAM,GACN8K,GAAI,GAENJ,KAAM,CACJS,WAAY,YACZ5H,SAAU,WAEZyI,MAAO,CACLxX,MAAO,OACPyX,eAAgB,WAChBC,cAAe,GAEjBC,GAAI,CACFC,UAAW,OACXC,kBAAmB,SAErBC,GAAI,CACFF,UAAW,OACXC,kBAAmB,SAErBvT,IAAK,CACHkB,SAAU,QAEZuS,GAAI,CACFxB,GAAI,EACJV,GAAI,QACJtP,QAAS,GACTpC,OAAQ,SClMd6T,IAASvN,OACP,cAAC,IAAMwN,WAAP,UACE,cAAC,IAAD,CAAexD,MAAOA,GAAtB,SACE,cAAC,GAAD,QAGJyD,SAASC,eAAe,SAM1BrE,O","file":"static/js/main.9be339bc.chunk.js","sourcesContent":["import { nextFrame } from '@tensorflow/tfjs'\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Box, Button, Flex, Container, Heading } from 'theme-ui'\nimport * as knn from '@tensorflow-models/knn-classifier'\nimport * as mobilenet from '@tensorflow-models/mobilenet'\nimport { Error, Loading } from '../components'\nimport { removeUserMedia, useUserMedia } from '../hooks'\n\nconst CAMERA_SCALE = 2\nconst WIDTH = 1280 / CAMERA_SCALE\nconst HEIGHT = 720 / CAMERA_SCALE\n\nconst POSES = ['left', 'up', 'down', 'center', 'right'].sort((a, b) => a.localeCompare(b))\nlet raf: number | undefined\n\nconst TransferLearning = () => {\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const [modelMobilenet, setModelMobilenet] = useState<mobilenet.MobileNet>()\n  const [modelKnn, setModelKnn] = useState<knn.KNNClassifier>()\n  const [result, setResult] = useState<JSX.Element>()\n  const [takingPictures, setTakingPictures] = useState<boolean>(false)\n  const [takenPoses, setTakenPoses] = useState<any[]>([])\n  const [allPoses, setAllPoses] = useState<boolean>(false)\n  const [error, setError] = useState<boolean>(false)\n  const [media] = useUserMedia({\n    video: {\n      width: WIDTH,\n      height: HEIGHT,\n    },\n  })\n\n  const stopLoopDetection = () => {\n    if (raf) window.cancelAnimationFrame(raf)\n    raf = undefined\n  }\n\n  const addExample = async (classId: number | string) => {\n    if (!videoRef.current) return\n    setTakingPictures(true)\n    let i = 0\n\n    while (i < 15) {\n      const activation = modelMobilenet?.infer(videoRef.current)\n      if (activation) modelKnn?.addExample(activation, classId)\n      i++\n      await nextFrame()\n    }\n\n    const poses = [...takenPoses, classId].sort((a, b) => a.localeCompare(b))\n    setTakenPoses(poses)\n    setTakingPictures(false)\n\n    if (poses.toString() === POSES.toString()) {\n      setAllPoses(true)\n    }\n  }\n\n  const loopDetection = async () => {\n    if (!modelKnn || !videoRef.current) return\n    if (modelKnn.getNumClasses() > 0) {\n      const activation = modelMobilenet?.infer(videoRef.current)\n      const result = await modelKnn?.predictClass(activation!)\n\n      setResult(\n        <Box>\n          <Box mb={2} sx={{ fontWeight: 'bold' }}>\n            {result.label}\n          </Box>\n          {Object.keys(result.confidences).map((a, index) => (\n            <Box key={index}>\n              {a}: {result.confidences[a]}\n            </Box>\n          ))}\n        </Box>\n      )\n    }\n\n    raf = window.requestAnimationFrame(loopDetection)\n  }\n\n  const startLoopDetection = () => {\n    loopDetection()\n  }\n\n  const loadModels = useCallback(async () => {\n    try {\n      setModelMobilenet(await mobilenet.load())\n      setModelKnn(await knn.create())\n    } catch (e) {\n      console.log(e)\n      setError(true)\n    }\n  }, [setError, setModelKnn, setModelMobilenet])\n\n  const setCamera = useCallback(() => {\n    if (!videoRef.current || !media) return\n    videoRef.current.onloadedmetadata = () => {\n      videoRef.current && videoRef.current.play()\n      loadModels()\n    }\n    videoRef.current.srcObject = media\n  }, [media, loadModels])\n\n  useEffect(() => {\n    if (videoRef.current) setCamera()\n\n    return () => {\n      stopLoopDetection()\n      removeUserMedia(media)\n    }\n  }, [videoRef, media, setCamera])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Transfer Learning</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Teach the machine all five head positions to start the position analysis.\n      </Heading>\n      {error ? (\n        <Error />\n      ) : (\n        <>\n          {(!modelKnn || !modelMobilenet) && (\n            <Loading text=\"Loading Mobilenet and KNN Tensorflow Models\" />\n          )}\n          <Box sx={{ maxWidth: WIDTH }}>\n            <Box>\n              <video\n                style={{\n                  transform: 'scaleX(-1)',\n                }}\n                width={WIDTH}\n                height={HEIGHT}\n                ref={videoRef}\n              />\n            </Box>\n            {modelKnn && modelMobilenet && (\n              <>\n                <Box\n                  mt={3}\n                  sx={{\n                    opacity: takingPictures ? 0.5 : 1,\n                    pointerEvents: takingPictures ? 'none' : 'visible',\n                  }}\n                >\n                  {!allPoses && (\n                    <Box>\n                      <Flex sx={{ mt: 3, justifyContent: 'space-between' }}>\n                        <Button onClick={() => addExample('left')} variant=\"secondary\">\n                          Left\n                        </Button>\n                        <Button onClick={() => addExample('up')} variant=\"secondary\">\n                          Up\n                        </Button>\n                        <Button onClick={() => addExample('center')} variant=\"secondary\">\n                          Center\n                        </Button>\n                        <Button onClick={() => addExample('down')} variant=\"secondary\">\n                          Down\n                        </Button>\n                        <Button onClick={() => addExample('right')} variant=\"secondary\">\n                          Right\n                        </Button>\n                      </Flex>\n                    </Box>\n                  )}\n                  {allPoses && (\n                    <Button variant=\"primary\" onClick={startLoopDetection} mt={2}>\n                      Detect head position\n                    </Button>\n                  )}\n                </Box>\n                <Box mt={3}>{result}</Box>\n              </>\n            )}\n          </Box>\n        </>\n      )}\n    </Container>\n  )\n}\n\nexport default TransferLearning\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Box, Container, Heading } from 'theme-ui'\nimport * as faceLandmarksDetection from '@tensorflow-models/face-landmarks-detection'\n\nimport Stats from 'three/examples/jsm/libs/stats.module'\nimport {\n  Scene,\n  PerspectiveCamera,\n  BufferGeometry,\n  Float32BufferAttribute,\n  WebGLRenderer,\n  PointsMaterial,\n  Points,\n  Color,\n  TextureLoader,\n} from 'three'\n\nimport { Error, Loading } from '../components'\nimport { removeUserMedia, useUserMedia } from '../hooks'\nimport { PALLETE } from '../common'\n\nlet raf = 0\n\nconst CAMERA_SCALE = 2\nconst WIDTH = 1280 / CAMERA_SCALE\nconst HEIGHT = 720 / CAMERA_SCALE\n\nlet model: faceLandmarksDetection.FaceLandmarksPackage\n\nconst scene = new Scene()\nlet camera: PerspectiveCamera\nlet renderer: WebGLRenderer\nconst geometry = new BufferGeometry()\nlet positions: number[] = []\nconst color: Color = new Color()\nlet colors: number[] = []\nlet points: Points\nlet stats: Stats\n\nconst propsStatsContainer = {\n  position: 'absolute',\n  bottom: 0,\n  right: 0,\n  '& > div': {\n    position: 'static !important',\n  },\n}\n\nconst FaceMesh = () => {\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const statsRef = useRef<HTMLDivElement>(null)\n  const [error, setError] = useState<boolean>(false)\n  const [loading, setLoading] = useState<boolean>(false)\n  const [media] = useUserMedia({\n    video: {\n      facingMode: 'user',\n      width: WIDTH,\n      height: HEIGHT,\n    },\n  })\n\n  const loopPredictions = useCallback(async () => {\n    try {\n      if (!model || !videoRef.current || !canvasRef.current) {\n        raf = requestAnimationFrame(loopPredictions)\n        return\n      }\n\n      const predictions = await model.estimateFaces({\n        returnTensors: false,\n        flipHorizontal: false,\n        input: videoRef.current,\n      })\n\n      positions = []\n      colors = []\n\n      const { width, height } = canvasRef.current\n      predictions?.forEach(p => {\n        //@ts-ignore\n        const { annotations } = p\n\n        Object.keys(annotations).forEach((a, index) => {\n          color.setHex(PALLETE[index % (PALLETE.length - 1)])\n          annotations[a].forEach((i: number[]) => {\n            positions.push(i[0] - width / 2, height / 2 - i[1], -i[2])\n            colors.push(color.r, color.g, color.b)\n          })\n        })\n      })\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positions, 3))\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3))\n      geometry.computeBoundingSphere()\n      points.geometry.attributes.position.needsUpdate = true\n\n      renderer.render(scene, camera)\n      stats.update()\n    } catch (e) {\n      console.log(e)\n    }\n\n    raf = requestAnimationFrame(loopPredictions)\n  }, [])\n\n  const loadModel = useCallback(async () => {\n    try {\n      setLoading(true)\n      model = await faceLandmarksDetection.load(\n        faceLandmarksDetection.SupportedPackages.mediapipeFacemesh\n      )\n\n      setLoading(false)\n      loopPredictions()\n    } catch (e) {\n      setLoading(false)\n      setError(true)\n    }\n  }, [loopPredictions])\n\n  useEffect(() => {\n    if (!videoRef.current || !media) return\n    videoRef.current.srcObject = media\n    videoRef.current.onloadedmetadata = () => {\n      videoRef.current?.play()\n\n      if (!canvasRef.current) return\n      const { width, height } = canvasRef.current\n\n      camera = new PerspectiveCamera(60, width / height, 0.1, 1000)\n      camera.position.z = width / 2\n\n      const texture = new TextureLoader().load(\n        'https://raw.githubusercontent.com/mrdoob/three.js/master/examples/textures/sprites/disc.png'\n      )\n      //\n\n      renderer = new WebGLRenderer({\n        canvas: canvasRef.current!,\n        alpha: true,\n      })\n\n      renderer.setSize(width, height)\n\n      const material = new PointsMaterial({ size: 10, vertexColors: true, map: texture })\n\n      points = new Points(geometry, material)\n      scene.add(points)\n\n      if (!stats) {\n        stats = Stats()\n        statsRef.current?.appendChild(stats.dom)\n      }\n\n      loadModel()\n    }\n\n    return () => {\n      cancelAnimationFrame(raf)\n      removeUserMedia(media)\n      stats?.end()\n    }\n  }, [media, loadModel, videoRef, canvasRef, statsRef])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Face Mesh</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Create the face mesh of the detected face on the camera feed. <br />\n        <br />\n        Each color group represents one feature of the face being mapped, which means we can get the\n        positons individually.\n      </Heading>\n      {error ? (\n        <Error />\n      ) : (\n        <>\n          {loading && (\n            <Box mt={2}>\n              <Loading text=\"Loading Face Landmarks Model\" />\n            </Box>\n          )}\n          <Box sx={{ position: 'relative', mt: 2 }}>\n            <video style={{ opacity: 0.4 }} ref={videoRef} width={WIDTH} height={HEIGHT} />\n            <canvas\n              ref={canvasRef}\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n              }}\n              width={WIDTH}\n              height={HEIGHT}\n            />\n          </Box>\n        </>\n      )}\n      <Box\n        //@ts-ignore\n        sx={propsStatsContainer}\n        ref={statsRef}\n      />\n    </Container>\n  )\n}\n\nexport default FaceMesh\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Box, Container, Heading } from 'theme-ui'\nimport * as handpose from '@tensorflow-models/handpose'\nimport Stats from 'three/examples/jsm/libs/stats.module'\nimport {\n  Scene,\n  PerspectiveCamera,\n  BufferGeometry,\n  Float32BufferAttribute,\n  WebGLRenderer,\n  PointsMaterial,\n  Points,\n  Color,\n  TextureLoader,\n} from 'three'\n\n// import * as dat from 'dat.gui'\n\nimport { Error, Loading } from '../components'\nimport { useUserMedia, removeUserMedia } from '../hooks'\nimport { PALLETE } from '../common'\n\nconst CAMERA_SCALE = 2\nconst WIDTH = 1280 / CAMERA_SCALE\nconst HEIGHT = 720 / CAMERA_SCALE\n\nlet model: handpose.HandPose | undefined = undefined\nlet raf = 0\n\nconst scene = new Scene()\nlet camera: PerspectiveCamera\nlet renderer: WebGLRenderer\nconst geometry = new BufferGeometry()\nlet positions: number[] = []\nconst color: Color = new Color()\nlet colors: number[] = []\nlet points: Points\nlet stats: Stats\n\nconst propsStatsContainer = {\n  position: 'absolute',\n  bottom: 0,\n  right: 0,\n  '& > div': {\n    position: 'static !important',\n  },\n}\n\n// const propsGui = {\n//   offsetX: -215,\n//   offsetY: 137,\n// }\n\nconst HandPose = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const statsRef = useRef<HTMLDivElement>(null)\n  const [loading, setLoading] = useState(true)\n  const [stream] = useUserMedia({\n    video: {\n      width: WIDTH,\n      height: HEIGHT,\n    },\n  })\n  const [error, setError] = useState<boolean>(false)\n\n  const estimateHands = useCallback(async () => {\n    try {\n      const predictions = videoRef.current && (await model?.estimateHands(videoRef.current))\n\n      if (canvasRef.current) {\n        positions = []\n        colors = []\n        const { width, height } = canvasRef.current\n        predictions?.forEach(p => {\n          Object.keys(p.annotations).forEach((a, index) => {\n            color.setHex(PALLETE[index % (PALLETE.length - 1)])\n            p.annotations[a].forEach(i => {\n              positions.push(i[0] - width / 2, height / 2 - i[1], -i[2])\n              colors.push(color.r, color.g, color.b)\n            })\n          })\n        })\n\n        geometry.setAttribute('position', new Float32BufferAttribute(positions, 3))\n        geometry.setAttribute('color', new Float32BufferAttribute(colors, 3))\n        geometry.computeBoundingSphere()\n        points.geometry.attributes.position.needsUpdate = true\n      }\n\n      renderer.render(scene, camera)\n      stats.update()\n      raf = requestAnimationFrame(estimateHands)\n    } catch (e) {\n      console.log(e)\n    }\n  }, [])\n\n  const loadModel = useCallback(async () => {\n    try {\n      setLoading(true)\n      model = await handpose.load()\n      setLoading(false)\n      estimateHands()\n    } catch (e) {\n      setError(true)\n      console.log(e)\n    }\n  }, [setLoading, estimateHands])\n\n  useEffect(() => {\n    if (!videoRef.current || !canvasRef.current || !stream) return\n    videoRef.current.srcObject = stream\n    videoRef.current.onloadedmetadata = () => {\n      videoRef.current!.play()\n      loadModel()\n    }\n\n    const { width, height } = canvasRef.current\n\n    camera = new PerspectiveCamera(60, width / height, 0.1, 1000)\n    camera.position.z = width / 2\n\n    const texture = new TextureLoader().load(\n      'https://raw.githubusercontent.com/mrdoob/three.js/master/examples/textures/sprites/disc.png'\n    )\n    //\n\n    renderer = new WebGLRenderer({\n      canvas: canvasRef.current,\n      alpha: true,\n    })\n\n    renderer.setSize(width, height)\n\n    const material = new PointsMaterial({ size: 20, vertexColors: true, map: texture })\n\n    points = new Points(geometry, material)\n    scene.add(points)\n\n    if (!stats) {\n      stats = Stats()\n      statsRef.current?.appendChild(stats.dom)\n    }\n\n    // const gui = new dat.GUI()\n    // gui.add(propsGui, 'offsetX', -300, 300, 1)\n    // gui.add(propsGui, 'offsetY', -300, 300, 1)\n\n    return () => {\n      // gui.destroy()\n      cancelAnimationFrame(raf)\n      removeUserMedia(stream)\n      raf = 0\n      stats.end()\n    }\n  }, [canvasRef, videoRef, stream, loadModel])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Hand Mesh</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Put your hand where the camera can see and start tracking and tracing your hand mesh.\n        <br />\n        <br />\n        Each color group represents one feature of the hand being mapped, which means we can get the\n        positons individually.\n      </Heading>\n      {error ? (\n        <Error />\n      ) : (\n        <>\n          {loading && (\n            <Box mt={2}>\n              <Loading text=\"Loading Hand Pose Model\" />\n            </Box>\n          )}\n          <Box sx={{ mt: 2, position: 'relative' }}>\n            <video\n              style={{ opacity: 0.4, transform: 'scaleX(-1)' }}\n              ref={videoRef}\n              width={WIDTH}\n              height={HEIGHT}\n            />\n            <canvas\n              style={{ transform: 'scaleX(-1)', position: 'absolute', top: 0, left: 0 }}\n              ref={canvasRef}\n              width={WIDTH}\n              height={HEIGHT}\n            />\n          </Box>\n        </>\n      )}\n      <Box\n        //@ts-ignore\n        sx={propsStatsContainer}\n        ref={statsRef}\n      />\n    </Container>\n  )\n}\n\nexport default HandPose\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Box, Container, Heading } from 'theme-ui'\nimport * as cocoSsd from '@tensorflow-models/coco-ssd'\nimport Stats from 'three/examples/jsm/libs/stats.module'\n\nimport { Error, Loading } from '../components'\nimport { useUserMedia, removeUserMedia } from '../hooks'\n\nconst CAMERA_SCALE = 2\nconst WIDTH = 1280 / CAMERA_SCALE\nconst HEIGHT = 720 / CAMERA_SCALE\n\nlet raf = 0\nlet model: cocoSsd.ObjectDetection\nlet stats: Stats\nlet ctx: CanvasRenderingContext2D | null = null\n\nconst propsStatsContainer = {\n  position: 'absolute',\n  bottom: 0,\n  right: 0,\n  '& > div': {\n    position: 'static !important',\n  },\n}\n\nconst RealTimeObjDetection = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const statsRef = useRef<HTMLDivElement>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<boolean>(false)\n  const [media] = useUserMedia({\n    video: {\n      width: WIDTH,\n      height: HEIGHT,\n    },\n  })\n\n  const analyseCamera = useCallback(async () => {\n    try {\n      if (ctx && videoRef.current && canvasRef.current) {\n        ctx.save()\n        ctx.scale(-1, 1)\n        ctx.drawImage(videoRef.current, 0, 0, WIDTH * -1, HEIGHT)\n        ctx.restore()\n        const predictions = await model.detect(canvasRef.current)\n        predictions.forEach(p => {\n          if (!ctx) return\n\n          ctx.beginPath()\n          ctx.strokeRect(p.bbox[0], p.bbox[1], p.bbox[2], p.bbox[3])\n          ctx.stroke()\n\n          ctx.font =\n            '14px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"'\n\n          const text = `${p.class}: ${Math.round(p.score * 100)}%`\n\n          const { width } = ctx.measureText(text)\n          ctx.fillStyle = '#000'\n          ctx.fillRect(p.bbox[0] - 1, p.bbox[1] - 30, width + 10, 30)\n\n          ctx.fillStyle = '#fff'\n          ctx.fillText(text, p.bbox[0] + 5, p.bbox[1] - 10)\n        })\n      }\n\n      stats.update()\n      raf = requestAnimationFrame(analyseCamera)\n    } catch (e) {\n      console.log(e)\n    }\n  }, [])\n\n  const loadModel = useCallback(async () => {\n    try {\n      setLoading(true)\n      model = await cocoSsd.load()\n      setLoading(false)\n      analyseCamera()\n    } catch (e) {\n      setError(true)\n      console.log(e)\n    }\n  }, [setLoading, analyseCamera])\n\n  useEffect(() => {\n    if (!videoRef.current || !canvasRef.current || !media) return\n    videoRef.current.srcObject = media\n    videoRef.current.onloadedmetadata = () => {\n      videoRef?.current?.play()\n      loadModel()\n    }\n\n    ctx = canvasRef.current.getContext('2d')\n\n    if (!stats) {\n      stats = Stats()\n      statsRef.current?.appendChild(stats.dom)\n    }\n\n    return () => {\n      cancelAnimationFrame(raf)\n      removeUserMedia(media)\n      raf = 0\n    }\n  }, [canvasRef, videoRef, media, loadModel])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Real-time Object Detection</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Real-time object detection through webcam feed using coco-ssd Model\n      </Heading>\n      {error ? (\n        <Error />\n      ) : (\n        <>\n          {loading && <Loading text=\"Loading Coco-SSD Model\" />}\n          <Box sx={{ position: 'relative' }}>\n            <video\n              style={{ opacity: 0.4, transform: 'scaleX(-1)' }}\n              ref={videoRef}\n              width={WIDTH}\n              height={HEIGHT}\n            />\n            <canvas\n              style={{ position: 'absolute', top: 0, left: 0 }}\n              ref={canvasRef}\n              width={WIDTH}\n              height={HEIGHT}\n            />\n          </Box>\n        </>\n      )}\n      <Box\n        //@ts-ignore\n        sx={propsStatsContainer}\n        ref={statsRef}\n      />\n    </Container>\n  )\n}\n\nexport default RealTimeObjDetection\n","import React from 'react'\nimport { Box, Container, Text, Heading, Link, Divider } from 'theme-ui'\n\nconst Home = () => {\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Hello World</Heading>\n      <Text>\n        This is a series of Machine Learning experiments using{' '}\n        <Link href=\"https://www.tensorflow.org/js\" target=\"_blank\">\n          TensorFlow.js\n        </Link>\n        ,{' '}\n        <Link href=\"https://threejs.org\" target=\"_blank\">\n          Three.js\n        </Link>\n        ,{' '}\n        <Link href=\"https://reactjs.org\" target=\"_blank\">\n          React\n        </Link>{' '}\n        and{' '}\n        <Link href=\"https://theme-ui.com\" target=\"_blank\">\n          Theme-ui\n        </Link>{' '}\n        by{' '}\n        <Link variant=\"text\" href=\"https://s2paganini.com\" target=\"_blank\">\n          Silvio Paganini\n        </Link>\n        .\n      </Text>\n      <Text>\n        <Text as=\"span\" sx={{ color: 'green' }}>\n          &#x2190;\n        </Text>{' '}\n        Choose the experiments on the left menu to start ⚡\n      </Text>\n      <Divider />\n      <Heading as=\"h3\" variant=\"styles.h3\" sx={{ mt: 4 }}>\n        How to run it locally\n      </Heading>\n      <Text>\n        <Text as=\"span\" sx={{ color: 'green' }}>\n          1)\n        </Text>{' '}\n        Clone the git repository{' '}\n        <Box as=\"pre\" variant=\"styles.pre\">\n          <code>$ git clone git@github.com:silviopaganini/tensorflow-study.git</code>\n        </Box>\n      </Text>\n      <Text>\n        <Text as=\"span\" sx={{ color: 'green' }}>\n          2)\n        </Text>{' '}\n        Install the packages and run\n        <Box as=\"pre\" variant=\"styles.pre\">\n          <code>\n            $ yarn install\n            <br />$ yarn start\n          </code>\n        </Box>\n      </Text>\n      <Heading as=\"h3\" variant=\"styles.h3\" sx={{ mt: 4 }}>\n        Contribute\n      </Heading>\n      <Text>\n        PRs are welcome! Don't forget to fill out a description of your PR. <br />\n        View source on{' '}\n        <Link href=\"https://github.com/silviopaganini/tensorflow-study\" target=\"_blank\">\n          Github\n        </Link>\n        .\n      </Text>\n      <Heading as=\"h3\" variant=\"styles.h3\" sx={{ mt: 4 }}>\n        ❗ Disclaimer\n      </Heading>\n      <Text>\n        All experiments were heavily tested on a good spec machine on Chrome and Opera.\n        <br />\n        Some experimemts might make your machine fans go crazy 😁 or just not work at all depending\n        on your configuration.\n      </Text>\n    </Container>\n  )\n}\n\nexport default Home\n","import React, { RefAttributes, PropsWithoutRef, ForwardRefExoticComponent } from 'react'\nimport { Link as RouterLink, LinkProps as RouterLinkProps } from 'react-router-dom'\nimport { NavLink as ThemeUILink, NavLinkProps as ThemedUILinkProps } from 'theme-ui'\n\n/**\n * @see https://www.reactjunkie.com/theme-ui-react-router-link-typescript\n */\n\ntype ForwardRef<T, P> = ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>\n\nexport type CustomLinkCombinedProps = ThemedUILinkProps & RouterLinkProps<{}>\nexport const CustomLink: ForwardRef<HTMLAnchorElement, CustomLinkCombinedProps> = ThemeUILink\n\nconst Link = ({ children, ...props }: CustomLinkCombinedProps) => {\n  return (\n    <CustomLink as={RouterLink} {...props}>\n      {children}\n    </CustomLink>\n  )\n}\n\nexport default Link\n","import React, { useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { Flex, MenuButton } from 'theme-ui'\nimport { Link } from '..'\nimport Routes from '../../routes'\n\nconst Nav = () => {\n  const location = useLocation()\n  const [show, setVisibility] = useState<boolean>(false)\n\n  return (\n    <>\n      <Flex\n        as=\"nav\"\n        sx={{\n          zIndex: 100,\n          flexDirection: 'column',\n          px: 3,\n          py: [5, 5, 4],\n          background: 'linear-gradient(180deg, #111 0%, #222 100%)',\n          position: ['fixed', 'fixed', 'relative'],\n          minHeight: '100vh',\n          minWidth: ['100vw', '100vw', '230px'],\n          width: '230px',\n          transition: '0.2s left ease-out',\n          left: [show ? 0 : '-100%', show ? 0 : '-100%', '0'],\n        }}\n      >\n        {Routes.map(r => {\n          return (\n            <Link\n              key={r.name}\n              variant=\"links.nav\"\n              onClick={() => {\n                setVisibility(false)\n              }}\n              sx={{\n                color: location.pathname === r.path ? 'green' : 'primary',\n                pointerEvents: location.pathname === r.path ? 'none' : 'visible',\n              }}\n              to={r.path}\n            >\n              {r.name}\n            </Link>\n          )\n        })}\n      </Flex>\n      <MenuButton\n        onClick={() => {\n          setVisibility(!show)\n        }}\n        sx={{\n          zIndex: 101,\n          position: 'fixed',\n          top: 2,\n          left: 2,\n          display: ['block', 'block', 'none'],\n        }}\n      />\n    </>\n  )\n}\n\nexport default Nav\n","import React from 'react'\nimport { Flex, Spinner, Label } from 'theme-ui'\n\ntype LoadingProps = {\n  text?: string\n}\n\nconst Loading = ({ text = 'Loading' }: LoadingProps) => (\n  <Flex>\n    <Flex sx={{ alignItems: 'center', py: 2 }}>\n      <Spinner variant=\"styles.spinner\" />\n      <Label>{text}</Label>\n    </Flex>\n  </Flex>\n)\n\nexport default Loading\n","import React from 'react'\nimport { Flex, Text, Box } from 'theme-ui'\n\ntype ErrorProps = {\n  text?: string\n}\n\nconst Error = ({ text = 'Some error has occurred, please refresh your page' }: ErrorProps) => (\n  <Box>\n    <Flex sx={{ alignItems: 'center', py: 2 }}>\n      <Text>{text}</Text>\n    </Flex>\n  </Box>\n)\n\nexport default Error\n","import React, { ReactNode } from 'react'\nimport { Box } from 'theme-ui'\nimport { Loading, Error } from '..'\n\ntype ModelReadyContainerProps = {\n  loadingMessage?: string\n  error?: boolean\n  modelLoaded?: boolean\n  children: ReactNode\n}\n\nconst ModelReadyContainer = ({\n  children,\n  error,\n  modelLoaded,\n  loadingMessage = 'Loading',\n}: ModelReadyContainerProps) => (\n  <Box>\n    {error ? <Error /> : <>{!modelLoaded ? <Loading text={loadingMessage} /> : children}</>}\n  </Box>\n)\n\nexport default ModelReadyContainer\n","export const PALLETE = [\n  0xedae49,\n  0xd1495b,\n  0x00798c,\n  0x30638e,\n  0x003d5b,\n  0x4b3f72,\n  0xe9190f,\n  0xf75c03,\n  0xf1c40f,\n  0xfe5f55,\n]\n\nexport const isMobile = () => {\n  return window.innerWidth < 1024\n}\n","import { useEffect, useState } from 'react'\n\nconst useAnalyser = (stream?: MediaStream, fftSize: number = 1024) => {\n  const [analyser, setAnalyser] = useState<AnalyserNode>()\n\n  useEffect(() => {\n    if (!stream || analyser) return\n\n    const audioctx = new AudioContext()\n    const source = audioctx.createMediaStreamSource(stream)\n    const a = audioctx.createAnalyser()\n    a.smoothingTimeConstant = 0\n\n    source.connect(a)\n    a.fftSize = fftSize\n    setAnalyser(a)\n  }, [stream, fftSize, analyser])\n\n  return analyser\n}\n\nexport default useAnalyser\n","import { useEffect, useState } from 'react'\n\nconst useUserMedia = (props: MediaStreamConstraints): [MediaStream?, Error?] => {\n  const [media, setMedia] = useState<MediaStream>()\n  const [error, setError] = useState<Error>()\n\n  useEffect(() => {\n    if (media) return\n    const getMedia = async () => {\n      try {\n        const m = await navigator.mediaDevices.getUserMedia(props)\n        m.addEventListener('removetrack', () => {\n          console.log('removetrack')\n        })\n        setMedia(m)\n      } catch (e) {\n        setError(e)\n      }\n    }\n\n    getMedia()\n  }, [props, media])\n  return [media, error]\n}\n\nexport const removeUserMedia = (media?: MediaStream) => {\n  media?.getTracks().forEach(m => {\n    m.stop()\n    media.removeTrack(m)\n  })\n}\n\nexport default useUserMedia\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport * as mobilenet from '@tensorflow-models/mobilenet'\nimport { Box, Button, Heading, Container } from 'theme-ui'\nimport { Loading, ModelReadyContainer } from '../components'\nimport { isMobile } from '../common'\nimport { removeUserMedia, useUserMedia } from '../hooks'\n\nconst CAMERA_SCALE = 2\nconst WIDTH = 1280 / CAMERA_SCALE\nconst HEIGHT = 720 / CAMERA_SCALE\n\nconst Webcam = () => {\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const [modelMobilenet, setModel] = useState<mobilenet.MobileNet>()\n  const [loading, setLoading] = useState<boolean>(false)\n  const [error, setError] = useState<boolean>(false)\n  const [result, setResult] = useState<JSX.Element[]>()\n  const [media] = useUserMedia({\n    video: {\n      width: WIDTH,\n      height: HEIGHT,\n    },\n  })\n\n  const classify = useCallback(\n    (img: HTMLVideoElement) => {\n      const load = async (img: HTMLVideoElement) => {\n        if (!modelMobilenet) {\n          setResult(undefined)\n          return\n        }\n\n        try {\n          setLoading(true)\n          const output = await modelMobilenet.classify(img)\n          const outputList = output.map((o, index) => (\n            <Box key={index}>\n              <b>{o.className}</b> - {`${Math.round(o.probability * 100)}%`}\n            </Box>\n          ))\n\n          setResult(outputList)\n          setLoading(false)\n        } catch (e) {\n          setLoading(false)\n          setResult(undefined)\n          console.log(e)\n        }\n      }\n      load(img)\n    },\n    [modelMobilenet]\n  )\n\n  const onCapture = () => {\n    if (!videoRef.current) return\n    try {\n      classify(videoRef.current)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const loadModels = useCallback(async () => {\n    try {\n      setModel(await mobilenet.load())\n    } catch (e) {\n      console.log(e)\n      setError(true)\n    }\n  }, [setError, setModel])\n\n  const setCamera = useCallback(() => {\n    if (!videoRef.current || !media) return\n    videoRef.current.onloadedmetadata = () => {\n      videoRef.current && videoRef.current.play()\n      loadModels()\n    }\n    videoRef.current.srcObject = media\n  }, [media, loadModels])\n\n  useEffect(() => {\n    setCamera()\n\n    return () => {\n      removeUserMedia(media)\n    }\n  }, [setCamera, media])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Webcam object detection</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Hold an object in front of your camera and click on \"Capture\" to analyse the camera feed\n      </Heading>\n      <Box\n        sx={{\n          position: ['absolute', 'absolute', 'relative'],\n          top: [0, 0, 'auto'],\n          left: [0, 0, 'auto'],\n          width: ['100%', '100%', 'auto'],\n          height: ['100%', '100%', 'auto'],\n          maxWidth: ['auto', 'auto', WIDTH],\n          maxHeight: ['auto', 'auto', HEIGHT],\n          zIndex: [-1, -1, 2],\n        }}\n      >\n        <video\n          style={{\n            transform: 'scaleX(-1)',\n          }}\n          width={isMobile() ? window.innerWidth : WIDTH}\n          height={isMobile() ? window.innerHeight : HEIGHT}\n          ref={videoRef}\n        />\n      </Box>\n\n      <ModelReadyContainer\n        error={error}\n        loadingMessage=\"Loading Mobilenet Tensorflow Models\"\n        modelLoaded={!!modelMobilenet}\n      >\n        <Button sx={{ mt: 4 }} onClick={onCapture} variant=\"primary\">\n          Capture\n        </Button>\n        {loading && <Loading text=\"Analysing\" />}\n        {result && <Box mt={3}>{result}</Box>}\n      </ModelReadyContainer>\n    </Container>\n  )\n}\n\nexport default Webcam\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Box, Image, Button, Heading, Container } from 'theme-ui'\nimport * as mobilenet from '@tensorflow-models/mobilenet'\nimport { Loading, Error } from '../components'\n\nconst ImageDetection = () => {\n  const ref = useRef<HTMLImageElement>(null)\n  const [loading, setLoading] = useState<boolean>(false)\n  const [modelMobilenet, setModelMobilenet] = useState<mobilenet.MobileNet>()\n  const [error, setError] = useState<boolean>(false)\n  const [key, setKey] = useState<number>(0)\n  const [result, setResult] = useState<JSX.Element[]>()\n\n  const classify = useCallback(\n    (img: HTMLImageElement) => {\n      const load = async (img: HTMLImageElement) => {\n        if (!modelMobilenet) {\n          setLoading(false)\n          setResult(undefined)\n          return\n        }\n\n        try {\n          setLoading(true)\n          const output = await modelMobilenet.classify(img)\n          const outputList = output.map((o, index) => (\n            <Box key={index}>\n              <b>{o.className}</b> - {`${Math.round(o.probability * 100)}%`}\n            </Box>\n          ))\n\n          setResult(outputList)\n          setLoading(false)\n        } catch (e) {\n          setLoading(false)\n          setResult(undefined)\n          console.log(e)\n        }\n      }\n      load(img)\n    },\n    [modelMobilenet]\n  )\n\n  const onLoadImage = () => {\n    if (ref.current) classify(ref.current)\n  }\n\n  const loadModels = async () => {\n    try {\n      setModelMobilenet(await mobilenet.load())\n      setLoading(false)\n    } catch (e) {\n      console.log(e)\n      setError(true)\n    }\n  }\n\n  useEffect(() => {\n    loadModels()\n  }, [])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Random Image Detection</Heading>\n      {error ? (\n        <Error />\n      ) : modelMobilenet ? (\n        <Container>\n          <Image\n            onLoad={onLoadImage}\n            key={key}\n            ref={ref}\n            alt=\"cat\"\n            crossOrigin=\"anonymous\"\n            src={`https://loremflickr.com/1000/700/nature?lock=${key}`}\n            sx={{ maxHeight: 700, width: 'auto' }}\n          />\n          {result && <Box mt={3}>{result}</Box>}\n          <Button\n            mt={3}\n            variant=\"primary\"\n            sx={{ pointerEvents: loading ? 'none' : 'visible', opacity: loading ? 0.5 : 1 }}\n            onClick={() => {\n              setLoading(true)\n              setResult(undefined)\n              setKey(key + 1)\n            }}\n          >\n            {loading ? 'Loading...' : 'Try a new image'}\n          </Button>\n        </Container>\n      ) : (\n        <Loading text=\"Loading Mobilenet Tensorflow Models\" />\n      )}\n    </Container>\n  )\n}\n\nexport default ImageDetection\n","import { LayersModel, loadLayersModel, tensor2d } from '@tensorflow/tfjs'\nimport React, { ChangeEvent, FormEvent, useEffect, useState } from 'react'\nimport { Container, Box, Button, Heading, Input, Text } from 'theme-ui'\nimport { ToxicityClassifier, load as loadToxicity } from '@tensorflow-models/toxicity'\nimport { Loading, Error } from '../components'\n\nconst MODEL_URL = 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json'\nconst METADATA_URL =\n  'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json'\n\nconst SentimentAnalysis = () => {\n  const [model, setModel] = useState<LayersModel>()\n  const [modelToxicity, setModelToxicity] = useState<ToxicityClassifier>()\n  const [metadata, setMetadata] = useState<any>()\n  const [loading, setLoading] = useState<boolean>(false)\n  const [loadingScore, setLoadingScore] = useState<boolean>(false)\n  const [score, setScore] = useState<number>()\n  const [scoreToxicity, setScoreToxicity] = useState<any[]>()\n  const [state, setState] = useState<string>(\n    'This is really the most useless talk I have ever watched'\n  )\n  const [error, setError] = useState<boolean>(false)\n\n  const loadModel = async () => {\n    try {\n      setLoading(true)\n      setModelToxicity(await loadToxicity(0.9, []))\n      setModel(await loadLayersModel(MODEL_URL))\n      setMetadata(await (await fetch(METADATA_URL)).json())\n      setLoading(false)\n    } catch (e) {\n      setError(true)\n    }\n  }\n\n  const onChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    setState(evt.currentTarget.value)\n  }\n\n  const onAnalyse = async (e: FormEvent | MouseEvent) => {\n    e.preventDefault()\n    if (!metadata || !model) return\n\n    setLoadingScore(true)\n    setScore(undefined)\n    setScoreToxicity(undefined)\n\n    const trimmed = state\n      .trim()\n      .toLowerCase()\n      .replace(/(\\.|,|!\\?)/g, '')\n      .split(' ')\n\n    const sequence = trimmed.map(word => {\n      const wordIndex = metadata.word_index[word]\n      if (typeof wordIndex === 'undefined') {\n        return 2\n      }\n      return wordIndex + metadata.index_from\n    })\n\n    const finalSequence = new Array(metadata.max_len - sequence.length).fill(0).concat(sequence)\n\n    const inputTensor = tensor2d(finalSequence, [1, metadata.max_len])\n    const prediction = model.predict(inputTensor)\n    //@ts-ignore\n    setScore(prediction.dataSync()[0])\n    //@ts-ignore\n    prediction.dispose()\n\n    setScoreToxicity(await modelToxicity?.classify([state]))\n    setLoadingScore(false)\n  }\n\n  useEffect(() => {\n    loadModel()\n  }, [])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Sentiment analysis</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Analyse text sentiment and toxicity.\n      </Heading>\n      {error ? (\n        <Error />\n      ) : (\n        <>\n          {loading && <Loading text=\"Loading Sentiment and Toxicity models\" />}\n          {!loading && (\n            <>\n              <Box as=\"form\" sx={{ position: 'relative' }} onSubmit={onAnalyse}>\n                <Input\n                  maxLength={100}\n                  autoComplete=\"off\"\n                  mt={3}\n                  onChange={onChange}\n                  value={state}\n                  name=\"input\"\n                />\n                <Box sx={{ position: 'absolute', bottom: -25, right: '2px', fontSize: 0 }}>\n                  {state.length}/100\n                </Box>\n              </Box>\n              {score && scoreToxicity && (\n                <Box mt={2}>\n                  <Text>\n                    <Heading mt={4} as=\"h3\">\n                      Sentiment Score:\n                    </Heading>\n                    <Text\n                      as=\"span\"\n                      mt={3}\n                      sx={{\n                        color: score > 0.66 ? 'green' : score < 0.33 ? 'red' : 'orange',\n                      }}\n                    >\n                      {score}\n                    </Text>\n                  </Text>\n                  <Text mt={2}>\n                    <Heading mt={4} as=\"h3\">\n                      Toxicity:\n                    </Heading>\n                    {scoreToxicity?.map((s: any, index: number) => (\n                      <Box\n                        mt={2}\n                        pl={3}\n                        key={index}\n                        sx={{ opacity: s.results.every((a: any) => a.match) ? 1 : 0.4 }}\n                      >\n                        <b>{s.label}</b>:\n                        {s.results.map((r: any, i: number) => (\n                          <Box mt={2} key={i}>\n                            <Text sx={{ pl: 4 }}>\n                              Probabilities: {JSON.stringify(r.probabilities)}\n                            </Text>\n                            <Text sx={{ pl: 4 }}>\n                              Match:{' '}\n                              <Text\n                                as=\"span\"\n                                sx={{\n                                  color: r.match ? 'green' : 'text',\n                                  fontWeight: r.match ? 'bold' : 'normal',\n                                }}\n                              >\n                                {JSON.stringify(r.match)}\n                              </Text>\n                            </Text>\n                          </Box>\n                        ))}\n                      </Box>\n                    ))}\n                  </Text>\n                </Box>\n              )}\n              <Button\n                sx={{\n                  opacity: loadingScore ? 0.4 : 1,\n                  pointerEvents: loadingScore ? 'none' : 'visible',\n                }}\n                mt={4}\n                onClick={onAnalyse}\n              >\n                {!loadingScore ? 'Analyse' : 'Loading...'}\n              </Button>\n            </>\n          )}\n        </>\n      )}\n    </Container>\n  )\n}\n\nexport default SentimentAnalysis\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Box, Text, Container, Heading, Link } from 'theme-ui'\nimport * as speechCommands from '@tensorflow-models/speech-commands'\nimport { useUserMedia, useAnalyser, removeUserMedia } from '../hooks'\nimport { ModelReadyContainer } from '../components'\n\nlet raf = 0\n\nconst Audio = () => {\n  const [media] = useUserMedia({ audio: true })\n  const analyser = useAnalyser(media)\n  const [model, setModel] = useState<speechCommands.SpeechCommandRecognizer>()\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const [error, setError] = useState<boolean>(false)\n  const [result, setResult] = useState<JSX.Element[]>()\n\n  const drawCanvas = (\n    freqData: Uint8Array,\n    ctx: CanvasRenderingContext2D,\n    canvas: HTMLCanvasElement\n  ) => {\n    for (let i = 0; i < freqData.length; i++) {\n      let value = 2 * freqData[i] * 255\n\n      let colorValue = Math.max(0, 255 * value)\n      colorValue = Math.pow(colorValue, 3)\n      colorValue = Math.round(255 * colorValue)\n      const fillStyle = `rgb(${colorValue},${255 - colorValue},${255 - colorValue})`\n\n      ctx.beginPath()\n      ctx.strokeStyle = fillStyle\n      ctx.moveTo(canvas.width - 1, canvas.height - i * (canvas.height / freqData.length))\n\n      ctx.lineTo(\n        canvas.width - 1,\n        canvas.height - (i * canvas.height) / freqData.length + canvas.height / freqData.length\n      )\n      ctx.stroke()\n    }\n  }\n\n  const getAudioData = useCallback(() => {\n    if (!analyser || !canvasRef.current) {\n      raf = requestAnimationFrame(getAudioData)\n      return\n    }\n\n    const ctx = canvasRef.current.getContext('2d')\n\n    if (!ctx) {\n      raf = requestAnimationFrame(getAudioData)\n      return\n    }\n\n    const freqData = new Uint8Array(analyser.frequencyBinCount)\n    analyser.getByteFrequencyData(freqData)\n\n    const imageData = ctx.getImageData(1, 0, canvasRef.current.width - 1, canvasRef.current.height)\n    ctx.putImageData(imageData, 0, 0)\n\n    drawCanvas(freqData, ctx, canvasRef.current)\n\n    raf = requestAnimationFrame(getAudioData)\n  }, [analyser])\n\n  const loadModel = useCallback(async () => {\n    try {\n      const URL = window.location.origin\n      const checkpointURL = `${URL}/model/model.json` // model topology\n      const metadataURL = `${URL}/model/metadata.json` // model metadata\n\n      const recognizer = speechCommands.create(\n        'BROWSER_FFT', // fourier transform type, not useful to change\n        undefined, // speech commands vocabulary feature, not useful when training models with teachable machine\n        checkpointURL,\n        metadataURL\n      )\n\n      // check that model and metadata are loaded via HTTPS requests.\n      await recognizer.ensureModelLoaded()\n\n      setModel(recognizer)\n      const classLabels = recognizer.wordLabels() // get class labels\n\n      getAudioData()\n\n      await recognizer.listen(\n        //@ts-ignore\n        result => {\n          const results = Object.keys(classLabels).reduce((acc, _i, index) => {\n            const classPrediction =\n              classLabels[index] + ': ' + Number(result.scores[index]).toFixed(2)\n            acc.push(\n              <Box sx={{ opacity: result.scores[index] > 0.7 ? 1 : 0.5 }} key={_i}>\n                {classPrediction}\n              </Box>\n            )\n            return acc\n          }, [] as JSX.Element[])\n\n          setResult(results)\n        },\n        {\n          includeSpectrogram: false,\n          probabilityThreshold: 0.75,\n          invokeCallbackOnNoiseAndUnknown: true,\n          overlapFactor: 0.5,\n        }\n      )\n    } catch (e) {\n      setError(true)\n    }\n  }, [setError, getAudioData])\n\n  useEffect(() => {\n    if (!analyser || !canvasRef.current) return\n    loadModel()\n\n    return () => {\n      removeUserMedia(media)\n      cancelAnimationFrame(raf)\n    }\n  }, [canvasRef, analyser, loadModel, media])\n\n  return (\n    <Container as=\"section\" variant=\"layout.section\">\n      <Heading as=\"h2\">Audio Analysis</Heading>\n      <Heading as=\"h4\" variant=\"styles.h4\">\n        Model trained to detect{' '}\n        <Text as=\"span\" sx={{ color: 'green' }}>\n          \"Yes\"\n        </Text>\n        and{' '}\n        <Text as=\"span\" sx={{ color: 'green' }}>\n          \"No\"\n        </Text>{' '}\n        instructions,{' '}\n        <Text as=\"span\" sx={{ color: 'green' }}>\n          clapping\n        </Text>{' '}\n        and{' '}\n        <Text as=\"span\" sx={{ color: 'green' }}>\n          typing\n        </Text>{' '}\n        noises using{' '}\n        <Link href=\"https://teachablemachine.withgoogle.com\" target=\"_blank\">\n          Teachable Machine\n        </Link>{' '}\n        from Google.\n      </Heading>\n      <canvas ref={canvasRef} width={800} height={500} />\n      <ModelReadyContainer\n        error={error}\n        loadingMessage=\"Loading SpeechCommand Models\"\n        modelLoaded={!!model}\n      >\n        <Box>{result || 'listening...'}</Box>\n      </ModelReadyContainer>\n    </Container>\n  )\n}\n\nexport default Audio\n","import {\n  SentimentAnalysis,\n  FaceMesh,\n  Home,\n  ImageDetection,\n  TransferLearning,\n  Webcam,\n  // Audio,\n  HandPose,\n  RealTimeObjDetection,\n  Audio,\n} from '../pages'\n\nconst { homepage: BASEPATH } = require('../../package.json')\n\nconst Routes = [\n  {\n    path: BASEPATH,\n    component: Home,\n    name: 'Home',\n    exact: true,\n  },\n  {\n    path: `${BASEPATH}image-detection`,\n    component: ImageDetection,\n    name: 'Random Image Detection',\n  },\n  {\n    path: `${BASEPATH}realtime-obj-detection`,\n    component: RealTimeObjDetection,\n    name: 'Real-time Detection',\n  },\n  {\n    path: `${BASEPATH}webcam`,\n    component: Webcam,\n    name: 'Snapshot Detection',\n  },\n  {\n    path: `${BASEPATH}transfer-learning`,\n    component: TransferLearning,\n    name: 'Transfer Learning',\n  },\n  {\n    path: `${BASEPATH}sentiment`,\n    component: SentimentAnalysis,\n    name: 'Sentiment Analysis',\n  },\n  {\n    path: `${BASEPATH}facemesh`,\n    component: FaceMesh,\n    name: 'Face Mesh',\n  },\n\n  {\n    path: `${BASEPATH}hand-pose`,\n    component: HandPose,\n    name: 'Hand Mesh',\n  },\n\n  {\n    path: `${BASEPATH}audio-analysis`,\n    component: Audio,\n    name: 'Audio analysis',\n  },\n]\n\nexport default Routes\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Flex } from 'theme-ui'\nimport Routes from './routes'\nimport { Nav } from './components'\n\nconst App = () => (\n  <Router>\n    <Flex>\n      <Nav />\n      <Switch>\n        {Routes.map(({ exact, path, component: Component }, index) => (\n          <Route exact={exact} key={index} path={path}>\n            <Component />\n          </Route>\n        ))}\n      </Switch>\n    </Flex>\n  </Router>\n)\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Theme } from 'theme-ui'\n\nconst defaultButton = {\n  outline: 'none',\n}\n\nconst theme: Theme = {\n  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n  fonts: {\n    body:\n      '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n    heading: 'inherit',\n    monospace: 'Menlo, monospace',\n  },\n  breakpoints: ['40em', '56em', '64em'],\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 96],\n  fontWeights: {\n    body: 400,\n    heading: 700,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.5,\n  },\n  sizes: {\n    container: '100%',\n  },\n  layout: {\n    section: {\n      pt: [5, 5, 4],\n      px: 4,\n      width: '100%',\n    },\n  },\n  buttons: {\n    menu: {\n      ...defaultButton,\n    },\n    primary: {\n      ...defaultButton,\n      cursor: 'pointer',\n      bg: 'green',\n      color: 'secondary',\n      transition: 'all .1s ease-out',\n      '&:hover': {\n        bg: 'secondary',\n        color: 'green',\n      },\n    },\n    secondary: {\n      ...defaultButton,\n      bg: 'secondary',\n      color: 'white',\n      cursor: 'pointer',\n    },\n  },\n  colors: {\n    text: '#FFF',\n    background: '#333',\n    primary: '#FFF',\n    gray: '#f0f0f0',\n    secondary: '#333',\n    green: 'rgb(99, 255, 203)',\n    muted: '#999',\n    code: '#444',\n  },\n  links: {\n    text: {\n      color: 'green',\n      '&:hover': {\n        textDecoration: 'none',\n      },\n    },\n    nav: {\n      fontSize: [2, 2, 0],\n      mr: 4,\n      my: [3, 3, 2],\n      color: 'primary',\n      transition: 'all 0.15s ease-out',\n      '&:active': {\n        color: 'green',\n      },\n      '&:focus': {\n        color: 'green',\n      },\n      '&:hover': {\n        opacity: 0.5,\n      },\n    },\n  },\n  text: {\n    heading: {\n      mb: 3,\n    },\n    default: {\n      mb: 3,\n    },\n  },\n  styles: {\n    root: {\n      fontFamily: 'body',\n      lineHeight: 'body',\n      fontWeight: 'body',\n      letterSpacing: '0.6px',\n      bg: 'black',\n    },\n    h1: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 5,\n    },\n    h2: {\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 4,\n    },\n    h3: {\n      color: 'muted',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 3,\n      variant: 'text.heading',\n    },\n    h4: {\n      color: 'muted',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'body',\n      fontSize: 2,\n      variant: 'text.heading',\n    },\n    h5: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 1,\n    },\n    h6: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 0,\n    },\n    p: {\n      color: 'text',\n      fontFamily: 'body',\n      fontWeight: 'body',\n      lineHeight: 'body',\n    },\n    a: {\n      color: 'primary',\n    },\n    pre: {\n      my: 3,\n      p: 3,\n      fontFamily: 'monospace',\n      overflowX: 'auto',\n      code: {\n        color: 'code',\n      },\n      maxWidth: '700px',\n      borderRadius: '7px',\n      bg: 'gray',\n      color: 'black',\n    },\n    // @ts-ignore\n    spinner: {\n      size: 20,\n      mr: 2,\n    },\n    code: {\n      fontFamily: 'monospace',\n      fontSize: 'inherit',\n    },\n    table: {\n      width: '100%',\n      borderCollapse: 'separate',\n      borderSpacing: 0,\n    },\n    th: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid',\n    },\n    td: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid',\n    },\n    img: {\n      maxWidth: '100%',\n    },\n    hr: {\n      my: 4,\n      bg: 'muted',\n      opacity: 0.3,\n      height: '1px',\n    },\n  },\n}\n\nexport default theme\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from 'theme-ui'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport theme from './theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}